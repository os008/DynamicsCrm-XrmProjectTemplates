//         Project / File: $rootnamespace$ / $safeitemrootname$.cs
// File generated by: XRM Test Framework - Wael Hamze, ramon tebar, Ahmed Elsawalhy

using System;
using System.Collections.Generic;
using System.Reflection;
$if$ ($targetframeworkversion$ >= 3.5)using System.Linq;
$endif$using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Diagnostics.CodeAnalysis;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;
using Moq;
using Xrm.Framework.Test;
using Xrm.Framework.Test.Unit.Moq.Hybrid;


namespace $rootnamespace$
{
	/// <summary>
	///     You must add the activity project in this test's references.
	///     The plugin's class, in its project, should be the same as the last part in its namespace;
	///     e.g. namespace: "Activities.Calculate", class: "Calculate".
	///     This test WILL communicate with CRM directly, but it will revert any changes made after.
	/// </summary>
	[TestClass]
	public class $safeitemrootname$ : ActivityHybridTest
	{
		#region Instance Variables

		// TODO: declare your variables for setup and verification
		//private Incident ticket;

		#endregion

		#region Setup

		[ExcludeFromCodeCoverage]
		public $safeitemrootname$()
		{
			// TODO: set activity class
			activityClass = typeof(ActivityClass);
		}

/// <summary>
///     If there are common records that can be prepared for all tests, do that here.<br />
///     Anything done in this method MUST be static, as it's run only once.
/// </summary>
protected override void SetupCommon()
		{
			// TODO: should the framework revert actions taken by the test on CRM
			undoTestActions = Defaults.UNDO_TEST_ACTIONS;

			// TODO: add common records preparations below
		}

		// TODO: clone!
		/// <summary>
		///     Clone this method for every test you want to run.<br />
		///     Should set the plugin trigger, prepare entities in CRM (if pre-operation, then set it only here -- in memory),
		///     and create the plugin object.
		/// </summary>
		private void Setup$safeitemrootname$Test()
		{
			#region Prepare entities

			// TODO: prepare Entities
			// you could retrieve already existing entities instead of creating new ones.
			// the mock above will take care of saving the previous state of entities
			// when the organisation service is used for any operation,
			// this will be used in clean up

			//ticket = new Incident
			//          {
			//	          Title = "Test 1",
			//          };
			//ticket.Id = service.Create(ticket);

			#endregion

			// add inputs to the activity, the first param is the name of the input variable,
			// and the second param is the value itself (can be int, entity ref, string ... etc.)
			//SetInputParam("Customer", "Mobinil");

			// TODO: target record for the activity to use (added to the context in the activity object)
			//SetTarget(ticket.ToEntityReference());
		}

		/// <summary>
		///     Reset the error before every test to be able to verify results correctly.
		/// </summary>
		[ExcludeFromCodeCoverage]
		[TestInitialize]
		public void PreTest()
		{
			// please don't modify this
			PrepareTest();
		}

		#endregion

		#region Test

		// TODO: clone!
		/// <summary>
		///     Clone this method for every test you prepared for above.<br />
		///     The name of the setup method MUST be the same as this method, but replace 'Run' with 'Setup.
		///     Same for verify method.
		/// </summary>
		[TestMethod]
		public void Run$safeitemrootname$Test()
		{
			// please don't modify this
			RunTest(MethodBase.GetCurrentMethod());
		}

		#endregion

		#region Verify

		// TODO: clone!
		/// <summary>
		///     Clone this method for every test you want to run.
		/// </summary>
		private void Verify$safeitemrootname$Test()
		{
			#region Verify results

			// TODO: verify results
			//var updatedTicket = onlineService.Retrieve(Incident.EntityLogicalName, ticket.Id,
			//	new ColumnSet(IncidentFields.OwnerId)).ToEntity<Incident>();
			//Assert.IsTrue(updatedTicket.OwnerId.Name.Contains("Admin"));

			#endregion
		}

		#endregion

		#region Clean Up

		[ExcludeFromCodeCoverage]
		[TestCleanup]
		public void PostTest()
		{
			TestCleanup();
		}

		[ExcludeFromCodeCoverage]
		[ClassCleanup]
		public static void Cleanup()
		{
			CleanupCommon();

			#region Common clean up

			// TODO: if needed, perform general clean up

			#endregion
		}

		#endregion
	}
}
