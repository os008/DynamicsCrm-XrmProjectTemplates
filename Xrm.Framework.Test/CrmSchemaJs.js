//         Project / File: LinkDev.Libraries.Common / CrmSchemaJs.js
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed el-Sawalhy

"use strict";

var Sdk = window.Sdk || { __namespace: true };

Sdk.CloneRecordTemplate =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 CloneFlagField: "ldv_cloneflagfield",
	 CloneRecordTemplateId: "ldv_clonerecordtemplateid",
	 Fields: "ldv_fields",
	 Default: "ldv_isdefault",
	 Name: "ldv_name",
	 TargetEntity: "ldv_targetentity",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.CloneRecordTemplate.DisplayName = "Clone Record Template";
Sdk.CloneRecordTemplate.SchemaName = "ldv_clonerecordtemplate";
Sdk.CloneRecordTemplate.EntityLogicalName = "ldv_clonerecordtemplate";

Sdk.CloneRecordTemplate.DefaultEnum =
{
	Yes: 1,
	No: 0
}

Sdk.CloneRecordTemplate.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.CloneRecordTemplate.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.CloneRecordTemplate.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	CloneFlagField: "ldv_CloneFlagField",
	CloneRecordTemplateId: "ldv_clonerecordtemplateId",
	Fields: "ldv_Fields",
	Default: "ldv_IsDefault",
	Name: "ldv_name",
	TargetEntity: "ldv_TargetEntity",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.CloneRecordTemplate.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	CloneFlagField:
	{
		_1033: "Clone Flag Field"
	}

,	CloneRecordTemplateId:
	{
		_1033: "Clone Record Template"
	}

,	Fields:
	{
		_1033: "Fields"
	}

,	Default:
	{
		_1033: "Default"
	}

,	Name:
	{
		_1033: "Name"
	}

,	TargetEntity:
	{
		_1033: "Target Entity"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.CloneRecordTemplate.Relations =
{
	OneToN:
	{
		ldv_clonerecordtemplate_AsyncOperations: "ldv_clonerecordtemplate_AsyncOperations",
		ldv_clonerecordtemplate_BulkDeleteFailures: "ldv_clonerecordtemplate_BulkDeleteFailures",
		ldv_clonerecordtemplate_MailboxTrackingFolders: "ldv_clonerecordtemplate_MailboxTrackingFolders",
		ldv_clonerecordtemplate_PrincipalObjectAttributeAccesses: "ldv_clonerecordtemplate_PrincipalObjectAttributeAccesses",
		ldv_clonerecordtemplate_ProcessSession: "ldv_clonerecordtemplate_ProcessSession",
		ldv_clonerecordtemplate_SyncErrors: "ldv_clonerecordtemplate_SyncErrors",
		ldv_clonerecordtemplate_UserEntityInstanceDatas: "ldv_clonerecordtemplate_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_clonerecordtemplate: "business_unit_ldv_clonerecordtemplate",
		lk_ldv_clonerecordtemplate_createdby: "lk_ldv_clonerecordtemplate_createdby",
		lk_ldv_clonerecordtemplate_createdonbehalfby: "lk_ldv_clonerecordtemplate_createdonbehalfby",
		lk_ldv_clonerecordtemplate_modifiedby: "lk_ldv_clonerecordtemplate_modifiedby",
		lk_ldv_clonerecordtemplate_modifiedonbehalfby: "lk_ldv_clonerecordtemplate_modifiedonbehalfby",
		owner_ldv_clonerecordtemplate: "owner_ldv_clonerecordtemplate",
		team_ldv_clonerecordtemplate: "team_ldv_clonerecordtemplate",
		user_ldv_clonerecordtemplate: "user_ldv_clonerecordtemplate"
,
		Lookups:
		{
			business_unit_ldv_clonerecordtemplate: "owningbusinessunit",
			lk_ldv_clonerecordtemplate_createdby: "createdby",
			lk_ldv_clonerecordtemplate_createdonbehalfby: "createdonbehalfby",
			lk_ldv_clonerecordtemplate_modifiedby: "modifiedby",
			lk_ldv_clonerecordtemplate_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_clonerecordtemplate: "ownerid",
			team_ldv_clonerecordtemplate: "owningteam",
			user_ldv_clonerecordtemplate: "owninguser"
		}
	},

	NToN:
	{
	}
}

Sdk.CustomJob =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 ActionName: "ldv_actionname",
	 ContextUser: "ldv_contextuser",
	 CurrentRetryRun: "ldv_currentretryrun",
	 CustomJobId: "ldv_customjobid",
	 FailureAction: "ldv_failureaction",
	 ContinueOnError: "ldv_iscontinueonerror",
	 DeleteOnSuccess: "ldv_isdeleteonsuccess",
	 DeleteSubJobsOnSuccess: "ldv_isdeletesubjobsonsuccess",
	 GenerateLogs: "ldv_isgeneratelogs",
	 IgnoreFailure: "ldv_isignorefailure",
	 MarkForWaiting: "ldv_ismarkforwaiting",
	 OnlyWorkingHours: "ldv_isonlyworkinghours",
	 ParentRecurrent: "ldv_isparentrecurrent",
	 RecurrentJob: "ldv_isrecurrentjob",
	 LatestRunMessage: "ldv_latestrunmessage",
	 MaxRetryCount: "ldv_maxretrycount",
	 Name: "ldv_name",
	 PageNumber: "ldv_pagenumber",
	 PagingCookie: "ldv_pagingcookie",
	 ParentJob: "ldv_parentjobid",
	 PreviousTargetDate: "ldv_previoustargetdate",
	 RecordsPerPage: "ldv_recordsperpage",
	 RecurrenceUpdatedTrigger: "ldv_recurrenceupdatedtrigger",
	 ResetField: "ldv_resetfield",
	 RetryExpiryAction: "ldv_retryexpiryaction",
	 RetrySchedule: "ldv_retryschedule",
	 RunTrigger: "ldv_runtrigger",
	 SerialisedInputParams: "ldv_serialisedinputparams",
	 SubJobsRetrySchedule: "ldv_subjobsretryscheduleid",
	 TargetDate: "ldv_targetdate",
	 TargetID: "ldv_targetid",
	 TargetLogicalName: "ldv_targetlogicalname",
	 TargetXML: "ldv_targetxml",
	 Timer: "ldv_timer",
	 TimerBase: "ldv_timerbase",
	 Workflow: "ldv_workflow",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.CustomJob.DisplayName = "Custom Job";
Sdk.CustomJob.SchemaName = "ldv_customjob";
Sdk.CustomJob.EntityLogicalName = "ldv_customjob";

Sdk.CustomJob.ContinueOnErrorEnum =
{
	Yes: 1,
	No: 0
}

Sdk.CustomJob.DeleteOnSuccessEnum =
{
	Yes: 1,
	No: 0
}

Sdk.CustomJob.DeleteSubJobsOnSuccessEnum =
{
	Yes: 1,
	No: 0
}

Sdk.CustomJob.GenerateLogsEnum =
{
	Yes: 1,
	No: 0
}

Sdk.CustomJob.IgnoreFailureEnum =
{
	Yes: 1,
	No: 0
}

Sdk.CustomJob.MarkForWaitingEnum =
{
	Yes: 1,
	No: 0
}

Sdk.CustomJob.OnlyWorkingHoursEnum =
{
	Yes: 1,
	No: 0
}

Sdk.CustomJob.ParentRecurrentEnum =
{
	Yes: 1,
	No: 0
}

Sdk.CustomJob.RecurrentJobEnum =
{
	Yes: 1,
	No: 0
}

Sdk.CustomJob.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.CustomJob.StatusReasonEnum =
{
	Draft: 753240006,
	Waiting: 753240005,
	WaitingOnSubJobs: 753240009,
	Queued: 1,
	Running: 753240004,
	Retry: 753240003,
	Success: 2,
	Failure: 753240002,
	PartialFailure: 753240007,
	Cancelled: 753240008
}


Sdk.CustomJob.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	ActionName: "ldv_ActionName",
	ContextUser: "ldv_ContextUser",
	CurrentRetryRun: "ldv_CurrentRetryRun",
	CustomJobId: "ldv_customjobId",
	FailureAction: "ldv_FailureAction",
	ContinueOnError: "ldv_IsContinueOnError",
	DeleteOnSuccess: "ldv_IsDeleteOnSuccess",
	DeleteSubJobsOnSuccess: "ldv_IsDeleteSubJobsOnSuccess",
	GenerateLogs: "ldv_IsGenerateLogs",
	IgnoreFailure: "ldv_IsIgnoreFailure",
	MarkForWaiting: "ldv_IsMarkForWaiting",
	OnlyWorkingHours: "ldv_IsOnlyWorkingHours",
	ParentRecurrent: "ldv_IsParentRecurrent",
	RecurrentJob: "ldv_IsRecurrentJob",
	LatestRunMessage: "ldv_LatestRunMessage",
	MaxRetryCount: "ldv_MaxRetryCount",
	Name: "ldv_name",
	PageNumber: "ldv_PageNumber",
	PagingCookie: "ldv_PagingCookie",
	ParentJob: "ldv_ParentJobId",
	PreviousTargetDate: "ldv_PreviousTargetDate",
	RecordsPerPage: "ldv_RecordsPerPage",
	RecurrenceUpdatedTrigger: "ldv_RecurrenceUpdatedTrigger",
	ResetField: "ldv_ResetField",
	RetryExpiryAction: "ldv_RetryExpiryAction",
	RetrySchedule: "ldv_RetrySchedule",
	RunTrigger: "ldv_RunTrigger",
	SerialisedInputParams: "ldv_SerialisedInputParams",
	SubJobsRetrySchedule: "ldv_SubJobsRetryScheduleId",
	TargetDate: "ldv_TargetDate",
	TargetID: "ldv_TargetID",
	TargetLogicalName: "ldv_TargetLogicalName",
	TargetXML: "ldv_TargetXML",
	Timer: "ldv_Timer",
	TimerBase: "ldv_TimerBase",
	Workflow: "ldv_Workflow",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.CustomJob.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	ActionName:
	{
		_1033: "Action Name"
	}

,	ContextUser:
	{
		_1033: "Context User"
	}

,	CurrentRetryRun:
	{
		_1033: "Current Retry Run"
	}

,	CustomJobId:
	{
		_1033: "Custom Job"
	}

,	FailureAction:
	{
		_1033: "Failure Action"
	}

,	ContinueOnError:
	{
		_1033: "Continue On Error"
	}

,	DeleteOnSuccess:
	{
		_1033: "Delete On Success"
	}

,	DeleteSubJobsOnSuccess:
	{
		_1033: "Delete Sub-Jobs On Success"
	}

,	GenerateLogs:
	{
		_1033: "Generate Logs"
	}

,	IgnoreFailure:
	{
		_1033: "Ignore Failure"
	}

,	MarkForWaiting:
	{
		_1033: "Mark For Waiting"
	}

,	OnlyWorkingHours:
	{
		_1033: "Only Working Hours"
	}

,	ParentRecurrent:
	{
		_1033: "Parent Recurrent"
	}

,	RecurrentJob:
	{
		_1033: "Recurrent Job"
	}

,	LatestRunMessage:
	{
		_1033: "Latest Run Message"
	}

,	MaxRetryCount:
	{
		_1033: "Max Retry Count"
	}

,	Name:
	{
		_1033: "Name"
	}

,	PageNumber:
	{
		_1033: "Page Number"
	}

,	PagingCookie:
	{
		_1033: "Paging Cookie"
	}

,	ParentJob:
	{
		_1033: "Parent Job"
	}

,	PreviousTargetDate:
	{
		_1033: "Previous Target Date"
	}

,	RecordsPerPage:
	{
		_1033: "Records Per Page"
	}

,	RecurrenceUpdatedTrigger:
	{
		_1033: "Recurrence Updated Trigger"
	}

,	ResetField:
	{
		_1033: "Reset Field"
	}

,	RetryExpiryAction:
	{
		_1033: "Retry Expiry Action"
	}

,	RetrySchedule:
	{
		_1033: "Retry Schedule"
	}

,	RunTrigger:
	{
		_1033: "Run Trigger"
	}

,	SerialisedInputParams:
	{
		_1033: "Serialised Input Params"
	}

,	SubJobsRetrySchedule:
	{
		_1033: "Sub-Jobs Retry Schedule"
	}

,	TargetDate:
	{
		_1033: "Target Date"
	}

,	TargetID:
	{
		_1033: "Target ID"
	}

,	TargetLogicalName:
	{
		_1033: "Target Logical Name"
	}

,	TargetXML:
	{
		_1033: "Target XML"
	}

,	Timer:
	{
		_1033: "Timer"
	}

,	TimerBase:
	{
		_1033: "Timer Base"
	}

,	Workflow:
	{
		_1033: "Workflow"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.CustomJob.Relations =
{
	OneToN:
	{
		ldv_customjob_AsyncOperations: "ldv_customjob_AsyncOperations",
		ldv_customjob_BulkDeleteFailures: "ldv_customjob_BulkDeleteFailures",
		ldv_customjob_MailboxTrackingFolders: "ldv_customjob_MailboxTrackingFolders",
		ldv_customjob_PrincipalObjectAttributeAccesses: "ldv_customjob_PrincipalObjectAttributeAccesses",
		ldv_customjob_ProcessSession: "ldv_customjob_ProcessSession",
		ldv_customjob_slainstance_CurrentSLAJobId: "ldv_customjob_slainstance_CurrentSLAJobId",
		ldv_customjob_SyncErrors: "ldv_customjob_SyncErrors",
		ldv_customjob_UserEntityInstanceDatas: "ldv_customjob_UserEntityInstanceDatas",
		CustomJobsOfParentJob: "ldv_ldv_customjob_ldv_customjob",
		ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob: "ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob",
		ldv_ldv_customjob_ldv_customjoblog: "ldv_ldv_customjob_ldv_customjoblog"
	},
			
	NToOne:
	{
		business_unit_ldv_customjob: "business_unit_ldv_customjob",
		CustomJobAsParentJob: "ldv_ldv_customjob_ldv_customjob",
		RecurrenceRuleAsRetrySchedule: "ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule",
		RecurrenceRuleAsSubJobsRetrySchedule: "ldv_recurrencerule_customjob_SubJobsRetryScheduleId",
		ldv_systemuser_ldv_customjob_ContextUser: "ldv_systemuser_ldv_customjob_ContextUser",
		ldv_workflow_ldv_customjob_FailureAction: "ldv_workflow_ldv_customjob_FailureAction",
		ldv_workflow_ldv_customjob_RetryExpiryAction: "ldv_workflow_ldv_customjob_RetryExpiryAction",
		ldv_workflow_ldv_customjob_Workflow: "ldv_workflow_ldv_customjob_Workflow",
		lk_ldv_customjob_createdby: "lk_ldv_customjob_createdby",
		lk_ldv_customjob_createdonbehalfby: "lk_ldv_customjob_createdonbehalfby",
		lk_ldv_customjob_modifiedby: "lk_ldv_customjob_modifiedby",
		lk_ldv_customjob_modifiedonbehalfby: "lk_ldv_customjob_modifiedonbehalfby",
		owner_ldv_customjob: "owner_ldv_customjob",
		team_ldv_customjob: "team_ldv_customjob",
		user_ldv_customjob: "user_ldv_customjob"
,
		Lookups:
		{
			business_unit_ldv_customjob: "owningbusinessunit",
			CustomJobAsParentJob: "ldv_parentjobid",
			RecurrenceRuleAsRetrySchedule: "ldv_retryschedule",
			RecurrenceRuleAsSubJobsRetrySchedule: "ldv_subjobsretryscheduleid",
			ldv_systemuser_ldv_customjob_ContextUser: "ldv_contextuser",
			ldv_workflow_ldv_customjob_FailureAction: "ldv_failureaction",
			ldv_workflow_ldv_customjob_RetryExpiryAction: "ldv_retryexpiryaction",
			ldv_workflow_ldv_customjob_Workflow: "ldv_workflow",
			lk_ldv_customjob_createdby: "createdby",
			lk_ldv_customjob_createdonbehalfby: "createdonbehalfby",
			lk_ldv_customjob_modifiedby: "modifiedby",
			lk_ldv_customjob_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_customjob: "ownerid",
			team_ldv_customjob: "owningteam",
			user_ldv_customjob: "owninguser"
		}
	},

	NToN:
	{
		RecurrenceRulesOfldv_ldv_customjob_ldv_recurrencerule: "ldv_ldv_customjob_ldv_recurrencerule"
	}
}

Sdk.CustomJobEngine =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 __10MinuteWFReset: "ldv_10minutewfreset",
	 __10MinuteWFRunID: "ldv_10minutewfrunid",
	 __1MinuteWFReset: "ldv_1minutewfreset",
	 __1MinuteWFRunID: "ldv_1minutewfrunid",
	 CustomJobEngineId: "ldv_customjobengineid",
	 HourlyBaseDate: "ldv_hourlybasedate",
	 HourlyWFReset: "ldv_hourlywfreset",
	 HourlyWFRunID: "ldv_hourlywfrunid",
	 HourlyTriggered: "ldv_ishourlytriggered",
	 MaxJobsPerRun: "ldv_maxjobsperrun",
	 MonitorWFRunID_ldv_Monitor1WFRunID: "ldv_monitor1wfrunid",
	 MonitorBaseDate: "ldv_monitorbasedate",
	 MonitorWFReset: "ldv_monitorwfreset",
	 MonitorWFRunID: "ldv_monitorwfrunid",
	 Monitorx2BaseDate: "ldv_monitorx2basedate",
	 Monitorx2WFReset: "ldv_monitorx2wfreset",
	 Monitorx2WFRunID: "ldv_monitorx2wfrunid",
	 Name: "ldv_name",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.CustomJobEngine.DisplayName = "Custom Job Engine";
Sdk.CustomJobEngine.SchemaName = "ldv_customjobengine";
Sdk.CustomJobEngine.EntityLogicalName = "ldv_customjobengine";

Sdk.CustomJobEngine.HourlyTriggeredEnum =
{
	Yes: 1,
	No: 0
}

Sdk.CustomJobEngine.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.CustomJobEngine.StatusReasonEnum =
{
	Running: 1,
	Stopped: 753240000,
	Inactive: 2
}


Sdk.CustomJobEngine.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	__10MinuteWFReset: "ldv_10MinuteWFReset",
	__10MinuteWFRunID: "ldv_10MinuteWFRunID",
	__1MinuteWFReset: "ldv_1MinuteWFReset",
	__1MinuteWFRunID: "ldv_1MinuteWFRunID",
	CustomJobEngineId: "ldv_customjobengineId",
	HourlyBaseDate: "ldv_HourlyBaseDate",
	HourlyWFReset: "ldv_HourlyWFReset",
	HourlyWFRunID: "ldv_HourlyWFRunID",
	HourlyTriggered: "ldv_IsHourlyTriggered",
	MaxJobsPerRun: "ldv_MaxJobsPerRun",
	MonitorWFRunID_ldv_Monitor1WFRunID: "ldv_Monitor1WFRunID",
	MonitorBaseDate: "ldv_MonitorBaseDate",
	MonitorWFReset: "ldv_MonitorWFReset",
	MonitorWFRunID: "ldv_MonitorWFRunID",
	Monitorx2BaseDate: "ldv_Monitorx2BaseDate",
	Monitorx2WFReset: "ldv_Monitorx2WFReset",
	Monitorx2WFRunID: "ldv_Monitorx2WFRunID",
	Name: "ldv_name",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.CustomJobEngine.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	__10MinuteWFReset:
	{
		_1033: "10-Minute WF Reset"
	}

,	__10MinuteWFRunID:
	{
		_1033: "10-Minute WF Run ID"
	}

,	__1MinuteWFReset:
	{
		_1033: "1-Minute WF Reset"
	}

,	__1MinuteWFRunID:
	{
		_1033: "1-Minute WF Run ID"
	}

,	CustomJobEngineId:
	{
		_1033: "Custom Job Engine"
	}

,	HourlyBaseDate:
	{
		_1033: "Hourly Base Date"
	}

,	HourlyWFReset:
	{
		_1033: "Hourly WF Reset"
	}

,	HourlyWFRunID:
	{
		_1033: "Hourly WF Run ID"
	}

,	HourlyTriggered:
	{
		_1033: "Hourly Triggered"
	}

,	MaxJobsPerRun:
	{
		_1033: "Max Jobs Per Run"
	}

,	MonitorWFRunID_ldv_Monitor1WFRunID:
	{
		_1033: "Monitor WF Run ID"
	}

,	MonitorBaseDate:
	{
		_1033: "Monitor Base Date"
	}

,	MonitorWFReset:
	{
		_1033: "Monitor WF Reset"
	}

,	MonitorWFRunID:
	{
		_1033: "Monitor WF Run ID"
	}

,	Monitorx2BaseDate:
	{
		_1033: "Monitor x2 Base Date"
	}

,	Monitorx2WFReset:
	{
		_1033: "Monitor x2 WF Reset"
	}

,	Monitorx2WFRunID:
	{
		_1033: "Monitor x2 WF Run ID"
	}

,	Name:
	{
		_1033: "Name"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.CustomJobEngine.Relations =
{
	OneToN:
	{
		ldv_customjobengine_AsyncOperations: "ldv_customjobengine_AsyncOperations",
		ldv_customjobengine_BulkDeleteFailures: "ldv_customjobengine_BulkDeleteFailures",
		ldv_customjobengine_MailboxTrackingFolders: "ldv_customjobengine_MailboxTrackingFolders",
		ldv_customjobengine_PrincipalObjectAttributeAccesses: "ldv_customjobengine_PrincipalObjectAttributeAccesses",
		ldv_customjobengine_ProcessSession: "ldv_customjobengine_ProcessSession",
		ldv_customjobengine_SyncErrors: "ldv_customjobengine_SyncErrors",
		ldv_customjobengine_UserEntityInstanceDatas: "ldv_customjobengine_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_customjobengine: "business_unit_ldv_customjobengine",
		lk_ldv_customjobengine_createdby: "lk_ldv_customjobengine_createdby",
		lk_ldv_customjobengine_createdonbehalfby: "lk_ldv_customjobengine_createdonbehalfby",
		lk_ldv_customjobengine_modifiedby: "lk_ldv_customjobengine_modifiedby",
		lk_ldv_customjobengine_modifiedonbehalfby: "lk_ldv_customjobengine_modifiedonbehalfby",
		owner_ldv_customjobengine: "owner_ldv_customjobengine",
		team_ldv_customjobengine: "team_ldv_customjobengine",
		user_ldv_customjobengine: "user_ldv_customjobengine"
,
		Lookups:
		{
			business_unit_ldv_customjobengine: "owningbusinessunit",
			lk_ldv_customjobengine_createdby: "createdby",
			lk_ldv_customjobengine_createdonbehalfby: "createdonbehalfby",
			lk_ldv_customjobengine_modifiedby: "modifiedby",
			lk_ldv_customjobengine_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_customjobengine: "ownerid",
			team_ldv_customjobengine: "owningteam",
			user_ldv_customjobengine: "owninguser"
		}
	},

	NToN:
	{
	}
}

Sdk.FetchXMLCondition =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 EntityLogicalName_ldv_EntityLogicalName: "ldv_entitylogicalname",
	 FetchXML: "ldv_fetchxml",
	 FetchXMLConditionId: "ldv_fetchxmlconditionid",
	 Name: "ldv_name",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.FetchXMLCondition.DisplayName = "FetchXML Condition";
Sdk.FetchXMLCondition.SchemaName = "ldv_fetchxmlcondition";
Sdk.FetchXMLCondition.EntityLogicalName = "ldv_fetchxmlcondition";

Sdk.FetchXMLCondition.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.FetchXMLCondition.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.FetchXMLCondition.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	EntityLogicalName_ldv_EntityLogicalName: "ldv_EntityLogicalName",
	FetchXML: "ldv_FetchXML",
	FetchXMLConditionId: "ldv_fetchxmlconditionId",
	Name: "ldv_name",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.FetchXMLCondition.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	EntityLogicalName_ldv_EntityLogicalName:
	{
		_1033: "Entity Logical Name"
	}

,	FetchXML:
	{
		_1033: "FetchXML"
	}

,	FetchXMLConditionId:
	{
		_1033: "FetchXML Condition"
	}

,	Name:
	{
		_1033: "Name"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.FetchXMLCondition.Relations =
{
	OneToN:
	{
		ldv_fetchxmlcondition_AsyncOperations: "ldv_fetchxmlcondition_AsyncOperations",
		ldv_fetchxmlcondition_BulkDeleteFailures: "ldv_fetchxmlcondition_BulkDeleteFailures",
		ldv_fetchxmlcondition_MailboxTrackingFolders: "ldv_fetchxmlcondition_MailboxTrackingFolders",
		ldv_fetchxmlcondition_PrincipalObjectAttributeAccesses: "ldv_fetchxmlcondition_PrincipalObjectAttributeAccesses",
		ldv_fetchxmlcondition_ProcessSession: "ldv_fetchxmlcondition_ProcessSession",
		ldv_fetchxmlcondition_SyncErrors: "ldv_fetchxmlcondition_SyncErrors",
		ldv_fetchxmlcondition_UserEntityInstanceDatas: "ldv_fetchxmlcondition_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_fetchxmlcondition: "business_unit_ldv_fetchxmlcondition",
		lk_ldv_fetchxmlcondition_createdby: "lk_ldv_fetchxmlcondition_createdby",
		lk_ldv_fetchxmlcondition_createdonbehalfby: "lk_ldv_fetchxmlcondition_createdonbehalfby",
		lk_ldv_fetchxmlcondition_modifiedby: "lk_ldv_fetchxmlcondition_modifiedby",
		lk_ldv_fetchxmlcondition_modifiedonbehalfby: "lk_ldv_fetchxmlcondition_modifiedonbehalfby",
		owner_ldv_fetchxmlcondition: "owner_ldv_fetchxmlcondition",
		team_ldv_fetchxmlcondition: "team_ldv_fetchxmlcondition",
		user_ldv_fetchxmlcondition: "user_ldv_fetchxmlcondition"
,
		Lookups:
		{
			business_unit_ldv_fetchxmlcondition: "owningbusinessunit",
			lk_ldv_fetchxmlcondition_createdby: "createdby",
			lk_ldv_fetchxmlcondition_createdonbehalfby: "createdonbehalfby",
			lk_ldv_fetchxmlcondition_modifiedby: "modifiedby",
			lk_ldv_fetchxmlcondition_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_fetchxmlcondition: "ownerid",
			team_ldv_fetchxmlcondition: "owningteam",
			user_ldv_fetchxmlcondition: "owninguser"
		}
	},

	NToN:
	{
	}
}

Sdk.GenericConfiguration =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 AssemblyExclusion: "ldv_assemblyexclusion",
	 AssemblyFilter: "ldv_assemblyfilter",
	 ConfigurationCacheDuration: "ldv_configurationcacheduration",
	 DefaultCalendar: "ldv_defaultcalendar",
	 DefaultFromUser: "ldv_defaultfromuserid",
	 DefaultRoutingUser: "ldv_defaultroutinguser",
	 FoxitPrintingPath: "ldv_foxitprintingpath",
	 GenericConfigurationId: "ldv_genericconfigurationid",
	 CategorisebyType: "ldv_iscategorisebytype",
	 ContinueNotifyOnError: "ldv_iscontinuenotifyonerror",
	 NotificationsCentreEnabled: "ldv_isnotificationscentreenabled",
	 ReuseLogFile: "ldv_isreuselogfile",
	 LogFileDateFormat: "ldv_logfiledateformat",
	 LogFileSplitDate: "ldv_logfilesplitdate",
	 LogFileSplitFrequency: "ldv_logfilesplitfrequency",
	 LogFileSplitMode: "ldv_logfilesplitmode",
	 LogLevel: "ldv_loglevel",
	 LogMode: "ldv_logmode",
	 LogPath: "ldv_logpath",
	 MaxFileSizeKB: "ldv_maxfilesize",
	 MetadataCacheDuration: "ldv_metadatacacheduration",
	 Name: "ldv_name",
	 OrganisationBaseURL: "ldv_organisationbaseurl",
	 OrgNameOnSSRS: "ldv_orgnameonssrs",
	 ReportServiceURL: "ldv_reportserviceurl",
	 SSRSDomain: "ldv_ssrsdomain",
	 SSRSPassword: "ldv_ssrspassword",
	 SSRSSharedFolderPath: "ldv_ssrssharedfolderpath",
	 SSRSUserName: "ldv_ssrsusername",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.GenericConfiguration.DisplayName = "Generic Configuration";
Sdk.GenericConfiguration.SchemaName = "ldv_genericconfiguration";
Sdk.GenericConfiguration.EntityLogicalName = "ldv_genericconfiguration";

Sdk.GenericConfiguration.CategorisebyTypeEnum =
{
	Yes: 1,
	No: 0
}

Sdk.GenericConfiguration.ContinueNotifyOnErrorEnum =
{
	Yes: 1,
	No: 0
}

Sdk.GenericConfiguration.NotificationsCentreEnabledEnum =
{
	Yes: 1,
	No: 0
}

Sdk.GenericConfiguration.ReuseLogFileEnum =
{
	Yes: 1,
	No: 0
}

Sdk.GenericConfiguration.LogFileSplitFrequencyEnum =
{
	Hourly: 10,
	Daily: 20,
	Monthly: 30,
	Yearly: 40
}

Sdk.GenericConfiguration.LogFileSplitModeEnum =
{
	Size: 10,
	Date: 20,
	Both: 30
}

Sdk.GenericConfiguration.LogLevelEnum =
{
	None: 0,
	Error: 10,
	Warning: 20,
	Info: 30,
	Debug: 40
}

Sdk.GenericConfiguration.LogModeEnum =
{
	CRM: 10,
	File: 20,
	Both: 30
}

Sdk.GenericConfiguration.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.GenericConfiguration.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.GenericConfiguration.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	AssemblyExclusion: "ldv_AssemblyExclusion",
	AssemblyFilter: "ldv_AssemblyFilter",
	ConfigurationCacheDuration: "ldv_ConfigurationCacheDuration",
	DefaultCalendar: "ldv_DefaultCalendar",
	DefaultFromUser: "ldv_DefaultFromUserId",
	DefaultRoutingUser: "ldv_DefaultRoutingUser",
	FoxitPrintingPath: "ldv_FoxitPrintingPath",
	GenericConfigurationId: "ldv_genericconfigurationId",
	CategorisebyType: "ldv_IsCategoriseByType",
	ContinueNotifyOnError: "ldv_IsContinueNotifyOnError",
	NotificationsCentreEnabled: "ldv_IsNotificationsCentreEnabled",
	ReuseLogFile: "ldv_IsReuseLogFile",
	LogFileDateFormat: "ldv_LogFileDateFormat",
	LogFileSplitDate: "ldv_LogFileSplitDate",
	LogFileSplitFrequency: "ldv_LogFileSplitFrequency",
	LogFileSplitMode: "ldv_LogFileSplitMode",
	LogLevel: "ldv_LogLevel",
	LogMode: "ldv_LogMode",
	LogPath: "ldv_LogPath",
	MaxFileSizeKB: "ldv_MaxFileSize",
	MetadataCacheDuration: "ldv_MetadataCacheDuration",
	Name: "ldv_name",
	OrganisationBaseURL: "ldv_OrganisationBaseURL",
	OrgNameOnSSRS: "ldv_OrgNameOnSSRS",
	ReportServiceURL: "ldv_ReportServiceURL",
	SSRSDomain: "ldv_SSRSDomain",
	SSRSPassword: "ldv_SSRSPassword",
	SSRSSharedFolderPath: "ldv_SSRSSharedFolderPath",
	SSRSUserName: "ldv_SSRSUserName",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.GenericConfiguration.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	AssemblyExclusion:
	{
		_1033: "Assembly Exclusion"
	}

,	AssemblyFilter:
	{
		_1033: "Assembly Filter"
	}

,	ConfigurationCacheDuration:
	{
		_1033: "Configuration Cache Duration"
	}

,	DefaultCalendar:
	{
		_1033: "Default Calendar"
	}

,	DefaultFromUser:
	{
		_1033: "Default From User"
	}

,	DefaultRoutingUser:
	{
		_1033: "Default Routing User"
	}

,	FoxitPrintingPath:
	{
		_1033: "Foxit Printing Path"
	}

,	GenericConfigurationId:
	{
		_1033: "Generic Configuration"
	}

,	CategorisebyType:
	{
		_1033: "Categorise by Type"
	}

,	ContinueNotifyOnError:
	{
		_1033: "Continue Notify On Error"
	}

,	NotificationsCentreEnabled:
	{
		_1033: "Notifications Centre Enabled"
	}

,	ReuseLogFile:
	{
		_1033: "Reuse Log File"
	}

,	LogFileDateFormat:
	{
		_1033: "Log File Date Format"
	}

,	LogFileSplitDate:
	{
		_1033: "Log File Split Date"
	}

,	LogFileSplitFrequency:
	{
		_1033: "Log File Split Frequency"
	}

,	LogFileSplitMode:
	{
		_1033: "Log File Split Mode"
	}

,	LogLevel:
	{
		_1033: "Log Level"
	}

,	LogMode:
	{
		_1033: "Log Mode"
	}

,	LogPath:
	{
		_1033: "Log Path"
	}

,	MaxFileSizeKB:
	{
		_1033: "Max File Size (KB)"
	}

,	MetadataCacheDuration:
	{
		_1033: "Metadata Cache Duration"
	}

,	Name:
	{
		_1033: "Name"
	}

,	OrganisationBaseURL:
	{
		_1033: "Organisation Base URL"
	}

,	OrgNameOnSSRS:
	{
		_1033: "Org Name On SSRS"
	}

,	ReportServiceURL:
	{
		_1033: "Report Service URL"
	}

,	SSRSDomain:
	{
		_1033: "SSRS Domain"
	}

,	SSRSPassword:
	{
		_1033: "SSRS Password"
	}

,	SSRSSharedFolderPath:
	{
		_1033: "SSRS Shared Folder Path"
	}

,	SSRSUserName:
	{
		_1033: "SSRS User Name"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.GenericConfiguration.Relations =
{
	OneToN:
	{
		ldv_genericconfiguration_AsyncOperations: "ldv_genericconfiguration_AsyncOperations",
		ldv_genericconfiguration_BulkDeleteFailures: "ldv_genericconfiguration_BulkDeleteFailures",
		ldv_genericconfiguration_MailboxTrackingFolders: "ldv_genericconfiguration_MailboxTrackingFolders",
		ldv_genericconfiguration_PrincipalObjectAttributeAccesses: "ldv_genericconfiguration_PrincipalObjectAttributeAccesses",
		ldv_genericconfiguration_ProcessSession: "ldv_genericconfiguration_ProcessSession",
		ldv_genericconfiguration_SyncErrors: "ldv_genericconfiguration_SyncErrors",
		ldv_genericconfiguration_UserEntityInstanceDatas: "ldv_genericconfiguration_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_genericconfiguration: "business_unit_ldv_genericconfiguration",
		ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId: "ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId",
		ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser: "ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser",
		lk_ldv_genericconfiguration_createdby: "lk_ldv_genericconfiguration_createdby",
		lk_ldv_genericconfiguration_createdonbehalfby: "lk_ldv_genericconfiguration_createdonbehalfby",
		lk_ldv_genericconfiguration_modifiedby: "lk_ldv_genericconfiguration_modifiedby",
		lk_ldv_genericconfiguration_modifiedonbehalfby: "lk_ldv_genericconfiguration_modifiedonbehalfby",
		owner_ldv_genericconfiguration: "owner_ldv_genericconfiguration",
		team_ldv_genericconfiguration: "team_ldv_genericconfiguration",
		user_ldv_genericconfiguration: "user_ldv_genericconfiguration"
,
		Lookups:
		{
			business_unit_ldv_genericconfiguration: "owningbusinessunit",
			ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId: "ldv_defaultfromuserid",
			ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser: "ldv_defaultroutinguser",
			lk_ldv_genericconfiguration_createdby: "createdby",
			lk_ldv_genericconfiguration_createdonbehalfby: "createdonbehalfby",
			lk_ldv_genericconfiguration_modifiedby: "modifiedby",
			lk_ldv_genericconfiguration_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_genericconfiguration: "ownerid",
			team_ldv_genericconfiguration: "owningteam",
			user_ldv_genericconfiguration: "owninguser"
		}
	},

	NToN:
	{
	}
}

Sdk.NotificationAttachment =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 File: "ldv_fileid",
	 HTML: "ldv_htmlid",
	 ConvertWordToPDF: "ldv_isconvertwordtopdf",
	 Name: "ldv_name",
	 NotificationAttachmentId: "ldv_notificationattachmentid",
	 ReportEntity: "ldv_reportentity",
	 ReportID: "ldv_reportidtext",
	 SendConditionEntity: "ldv_sendconditionentity",
	 SendConditions: "ldv_sendconditions",
	 Type: "ldv_typecode",
	 WordTemplateID: "ldv_wordtemplateidtext",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.NotificationAttachment.DisplayName = "Notification Attachment";
Sdk.NotificationAttachment.SchemaName = "ldv_notificationattachment";
Sdk.NotificationAttachment.EntityLogicalName = "ldv_notificationattachment";

Sdk.NotificationAttachment.ConvertWordToPDFEnum =
{
	Yes: 1,
	No: 0
}

Sdk.NotificationAttachment.TypeEnum =
{
	SSRSReport: 1,
	WordTemplate: 2,
	File: 3
}

Sdk.NotificationAttachment.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.NotificationAttachment.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.NotificationAttachment.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	File: "ldv_FileId",
	HTML: "ldv_HTMLId",
	ConvertWordToPDF: "ldv_IsConvertWordToPDF",
	Name: "ldv_name",
	NotificationAttachmentId: "ldv_notificationattachmentId",
	ReportEntity: "ldv_ReportEntity",
	ReportID: "ldv_ReportIdText",
	SendConditionEntity: "ldv_SendConditionEntity",
	SendConditions: "ldv_SendConditions",
	Type: "ldv_TypeCode",
	WordTemplateID: "ldv_WordTemplateIDText",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.NotificationAttachment.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	File:
	{
		_1033: "File"
	}

,	HTML:
	{
		_1033: "HTML"
	}

,	ConvertWordToPDF:
	{
		_1033: "Convert Word To PDF"
	}

,	Name:
	{
		_1033: "Name"
	}

,	NotificationAttachmentId:
	{
		_1033: "Notification Attachment"
	}

,	ReportEntity:
	{
		_1033: "Report Entity"
	}

,	ReportID:
	{
		_1033: "Report Name"
	}

,	SendConditionEntity:
	{
		_1033: "Send-Condition Entity"
	}

,	SendConditions:
	{
		_1033: "Send Conditions"
	}

,	Type:
	{
		_1033: "Type"
	}

,	WordTemplateID:
	{
		_1033: "Word Template ID"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.NotificationAttachment.Relations =
{
	OneToN:
	{
		ldv_notificationattachment_AsyncOperations: "ldv_notificationattachment_AsyncOperations",
		ldv_notificationattachment_BulkDeleteFailures: "ldv_notificationattachment_BulkDeleteFailures",
		ldv_notificationattachment_MailboxTrackingFolders: "ldv_notificationattachment_MailboxTrackingFolders",
		ldv_notificationattachment_PrincipalObjectAttributeAccesses: "ldv_notificationattachment_PrincipalObjectAttributeAccesses",
		ldv_notificationattachment_ProcessSession: "ldv_notificationattachment_ProcessSession",
		ldv_notificationattachment_SyncErrors: "ldv_notificationattachment_SyncErrors",
		ldv_notificationattachment_UserEntityInstanceDatas: "ldv_notificationattachment_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_notificationattachment: "business_unit_ldv_notificationattachment",
		NotificationAttachmentFileAsFile: "ldv_ldv_notificationattachmentfile_ldv_notificationattachment_FileId",
		NotificationTemplateAsHTML: "ldv_ldv_notificationtemplate_ldv_notificationattachment_HTMLId",
		lk_ldv_notificationattachment_createdby: "lk_ldv_notificationattachment_createdby",
		lk_ldv_notificationattachment_createdonbehalfby: "lk_ldv_notificationattachment_createdonbehalfby",
		lk_ldv_notificationattachment_modifiedby: "lk_ldv_notificationattachment_modifiedby",
		lk_ldv_notificationattachment_modifiedonbehalfby: "lk_ldv_notificationattachment_modifiedonbehalfby",
		owner_ldv_notificationattachment: "owner_ldv_notificationattachment",
		team_ldv_notificationattachment: "team_ldv_notificationattachment",
		user_ldv_notificationattachment: "user_ldv_notificationattachment"
,
		Lookups:
		{
			business_unit_ldv_notificationattachment: "owningbusinessunit",
			NotificationAttachmentFileAsFile: "ldv_fileid",
			NotificationTemplateAsHTML: "ldv_htmlid",
			lk_ldv_notificationattachment_createdby: "createdby",
			lk_ldv_notificationattachment_createdonbehalfby: "createdonbehalfby",
			lk_ldv_notificationattachment_modifiedby: "modifiedby",
			lk_ldv_notificationattachment_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_notificationattachment: "ownerid",
			team_ldv_notificationattachment: "owningteam",
			user_ldv_notificationattachment: "owninguser"
		}
	},

	NToN:
	{
		NotificationsOfldv_notification_ldv_notificationattachment: "ldv_notification_ldv_notificationattachment"
	}
}

Sdk.NotificationAttachmentFile =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 Name: "ldv_name",
	 NotificationAttachmentFileId: "ldv_notificationattachmentfileid",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.NotificationAttachmentFile.DisplayName = "Notification Attachment File";
Sdk.NotificationAttachmentFile.SchemaName = "ldv_notificationattachmentfile";
Sdk.NotificationAttachmentFile.EntityLogicalName = "ldv_notificationattachmentfile";

Sdk.NotificationAttachmentFile.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.NotificationAttachmentFile.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.NotificationAttachmentFile.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	Name: "ldv_name",
	NotificationAttachmentFileId: "ldv_notificationattachmentfileId",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.NotificationAttachmentFile.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	Name:
	{
		_1033: "Name"
	}

,	NotificationAttachmentFileId:
	{
		_1033: "Notification Attachment File"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.NotificationAttachmentFile.Relations =
{
	OneToN:
	{
		NotificationAttachmentsOfFile: "ldv_ldv_notificationattachmentfile_ldv_notificationattachment_FileId",
		ldv_notificationattachmentfile_Annotations: "ldv_notificationattachmentfile_Annotations",
		ldv_notificationattachmentfile_AsyncOperations: "ldv_notificationattachmentfile_AsyncOperations",
		ldv_notificationattachmentfile_BulkDeleteFailures: "ldv_notificationattachmentfile_BulkDeleteFailures",
		ldv_notificationattachmentfile_MailboxTrackingFolders: "ldv_notificationattachmentfile_MailboxTrackingFolders",
		ldv_notificationattachmentfile_PrincipalObjectAttributeAccesses: "ldv_notificationattachmentfile_PrincipalObjectAttributeAccesses",
		ldv_notificationattachmentfile_ProcessSession: "ldv_notificationattachmentfile_ProcessSession",
		ldv_notificationattachmentfile_SyncErrors: "ldv_notificationattachmentfile_SyncErrors",
		ldv_notificationattachmentfile_UserEntityInstanceDatas: "ldv_notificationattachmentfile_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_notificationattachmentfile: "business_unit_ldv_notificationattachmentfile",
		lk_ldv_notificationattachmentfile_createdby: "lk_ldv_notificationattachmentfile_createdby",
		lk_ldv_notificationattachmentfile_createdonbehalfby: "lk_ldv_notificationattachmentfile_createdonbehalfby",
		lk_ldv_notificationattachmentfile_modifiedby: "lk_ldv_notificationattachmentfile_modifiedby",
		lk_ldv_notificationattachmentfile_modifiedonbehalfby: "lk_ldv_notificationattachmentfile_modifiedonbehalfby",
		owner_ldv_notificationattachmentfile: "owner_ldv_notificationattachmentfile",
		team_ldv_notificationattachmentfile: "team_ldv_notificationattachmentfile",
		user_ldv_notificationattachmentfile: "user_ldv_notificationattachmentfile"
,
		Lookups:
		{
			business_unit_ldv_notificationattachmentfile: "owningbusinessunit",
			lk_ldv_notificationattachmentfile_createdby: "createdby",
			lk_ldv_notificationattachmentfile_createdonbehalfby: "createdonbehalfby",
			lk_ldv_notificationattachmentfile_modifiedby: "modifiedby",
			lk_ldv_notificationattachmentfile_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_notificationattachmentfile: "ownerid",
			team_ldv_notificationattachmentfile: "owningteam",
			user_ldv_notificationattachmentfile: "owninguser"
		}
	},

	NToN:
	{
	}
}

Sdk.NotificationMessage =
{
	 ActivityAdditionalParameters: "activityadditionalparams",
	 ActivityId: "activityid",
	 ActivityType: "activitytypecode",
	 ActualDuration: "actualdurationminutes",
	 ActualEnd: "actualend",
	 ActualStart: "actualstart",
	 BCC: "bcc",
	 CC: "cc",
	 SocialChannel: "community",
	 CreatedBy: "createdby",
	 DateCreated: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 Customers: "customers",
	 DateDeliveryLastAttempted: "deliverylastattemptedon",
	 DeliveryPriority: "deliveryprioritycode",
	 Message: "description",
	 ExchangeItemID: "exchangeitemid",
	 ExchangeRate: "exchangerate",
	 ExchangeWebLink: "exchangeweblink",
	 From: "from",
	 ImportSequenceNumber: "importsequencenumber",
	 RecurringInstanceType: "instancetypecode",
	 IsBilled: "isbilled",
	 IsPrivate: "ismapiprivate",
	 IsRegularActivity: "isregularactivity",
	 IsWorkflowCreated: "isworkflowcreated",
	 LastOnHoldTime: "lastonholdtime",
	 ContentModifiedOn: "ldv_contentmodifiedon",
	 GlobalMessage: "ldv_isglobalmessage",
	 NotificationSource: "ldv_notificationsource",
	 RegardingID: "ldv_regardingid",
	 RegardingTypeCode: "ldv_regardingtypecode",
	 Role: "ldv_roleid",
	 Team: "ldv_teamid",
	 User: "ldv_userid",
	 LeftVoiceMail: "leftvoicemail",
	 ModifiedBy: "modifiedby",
	 LastUpdated: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 OnHoldTimeMinutes: "onholdtime",
	 OptionalAttendees: "optionalattendees",
	 Organizer: "organizer",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 OutsourceVendors: "partners",
	 Delayactivityprocessinguntil: "postponeactivityprocessinguntil",
	 Priority: "prioritycode",
	 Process: "processid",
	 Regarding: "regardingobjectid",
	 RequiredAttendees: "requiredattendees",
	 Resources: "resources",
	 ScheduledDuration: "scheduleddurationminutes",
	 DueDate: "scheduledend",
	 StartDate: "scheduledstart",
	 SendersMailbox: "sendermailboxid",
	 DateSent: "senton",
	 SeriesId: "seriesid",
	 Service: "serviceid",
	 SLA: "slaid",
	 LastSLAapplied: "slainvokedid",
	 SortDate: "sortdate",
	 ProcessStage: "stageid",
	 ActivityStatus: "statecode",
	 StatusReason: "statuscode",
	 Title: "subject",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 To: "to",
	 Currency: "transactioncurrencyid",
	 TraversedPath: "traversedpath",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.NotificationMessage.DisplayName = "Notification Message";
Sdk.NotificationMessage.SchemaName = "ldv_notificationmessage";
Sdk.NotificationMessage.EntityLogicalName = "ldv_notificationmessage";

Sdk.NotificationMessage.ActivityTypeEnum =
{
	Fax: 4204,
	PhoneCall: 4210,
	Email: 4202,
	Letter: 4207,
	Appointment: 4201,
	ServiceActivity: 4214,
	OpportunityClose: 4208,
	OrderClose: 4209,
	QuoteClose: 4211,
	CaseResolution: 4206,
	Task: 4212,
	CampaignResponse: 4401,
	CampaignActivity: 4402,
	BulkOperation: 4406,
	RecurringAppointment: 4251,
	NotificationMessage: 10016,
	PushMessage: 10026,
	SMS: 10031
}

Sdk.NotificationMessage.SocialChannelEnum =
{
	Facebook: 1,
	Twitter: 2,
	Other: 0
}

Sdk.NotificationMessage.DeliveryPriorityEnum =
{
	Low: 0,
	Normal: 1,
	High: 2
}

Sdk.NotificationMessage.RecurringInstanceTypeEnum =
{
	NotRecurring: 0,
	RecurringMaster: 1,
	RecurringInstance: 2,
	RecurringException: 3,
	RecurringFutureException: 4
}

Sdk.NotificationMessage.IsBilledEnum =
{
	Yes: 1,
	No: 0
}

Sdk.NotificationMessage.IsPrivateEnum =
{
	Yes: 1,
	No: 0
}

Sdk.NotificationMessage.IsRegularActivityEnum =
{
	Yes: 1,
	No: 0
}

Sdk.NotificationMessage.IsWorkflowCreatedEnum =
{
	Yes: 1,
	No: 0
}

Sdk.NotificationMessage.GlobalMessageEnum =
{
	Yes: 1,
	No: 0
}

Sdk.NotificationMessage.NotificationSourceEnum =
{
	Manual: 1,
	Email: 2,
	Task: 3,
	Other: 999
}

Sdk.NotificationMessage.LeftVoiceMailEnum =
{
	Yes: 1,
	No: 0
}

Sdk.NotificationMessage.PriorityEnum =
{
	Low: 0,
	Normal: 1,
	High: 2
}

Sdk.NotificationMessage.ActivityStatusEnum =
{
	Open: 0,
	Completed: 1,
	Canceled: 2,
	Scheduled: 3
}

Sdk.NotificationMessage.StatusReasonEnum =
{
	Draft: 753240000,
	Open: 1,
	Completed: 2,
	Canceled: 3,
	Scheduled: 4
}


Sdk.NotificationMessage.Schema =
{
	ActivityAdditionalParameters: "ActivityAdditionalParams",
	ActivityId: "ActivityId",
	ActivityType: "ActivityTypeCode",
	ActualDuration: "ActualDurationMinutes",
	ActualEnd: "ActualEnd",
	ActualStart: "ActualStart",
	BCC: "BCC",
	CC: "CC",
	SocialChannel: "Community",
	CreatedBy: "CreatedBy",
	DateCreated: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	Customers: "Customers",
	DateDeliveryLastAttempted: "DeliveryLastAttemptedOn",
	DeliveryPriority: "DeliveryPriorityCode",
	Message: "Description",
	ExchangeItemID: "ExchangeItemId",
	ExchangeRate: "ExchangeRate",
	ExchangeWebLink: "ExchangeWebLink",
	From: "From",
	ImportSequenceNumber: "ImportSequenceNumber",
	RecurringInstanceType: "InstanceTypeCode",
	IsBilled: "IsBilled",
	IsPrivate: "IsMapiPrivate",
	IsRegularActivity: "IsRegularActivity",
	IsWorkflowCreated: "IsWorkflowCreated",
	LastOnHoldTime: "LastOnHoldTime",
	ContentModifiedOn: "ldv_ContentModifiedOn",
	GlobalMessage: "ldv_IsGlobalMessage",
	NotificationSource: "ldv_NotificationSource",
	RegardingID: "ldv_RegardingID",
	RegardingTypeCode: "ldv_RegardingTypeCode",
	Role: "ldv_RoleId",
	Team: "ldv_TeamId",
	User: "ldv_UserId",
	LeftVoiceMail: "LeftVoiceMail",
	ModifiedBy: "ModifiedBy",
	LastUpdated: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	OnHoldTimeMinutes: "OnHoldTime",
	OptionalAttendees: "OptionalAttendees",
	Organizer: "Organizer",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	OutsourceVendors: "Partners",
	Delayactivityprocessinguntil: "PostponeActivityProcessingUntil",
	Priority: "PriorityCode",
	Process: "ProcessId",
	Regarding: "RegardingObjectId",
	RequiredAttendees: "RequiredAttendees",
	Resources: "Resources",
	ScheduledDuration: "ScheduledDurationMinutes",
	DueDate: "ScheduledEnd",
	StartDate: "ScheduledStart",
	SendersMailbox: "SenderMailboxId",
	DateSent: "SentOn",
	SeriesId: "SeriesId",
	Service: "ServiceId",
	SLA: "SLAId",
	LastSLAapplied: "SLAInvokedId",
	SortDate: "SortDate",
	ProcessStage: "StageId",
	ActivityStatus: "StateCode",
	StatusReason: "StatusCode",
	Title: "Subject",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	To: "To",
	Currency: "TransactionCurrencyId",
	TraversedPath: "TraversedPath",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.NotificationMessage.Labels =
{
	ActivityAdditionalParameters:
	{
		_1033: "Activity Additional Parameters"
	}

,	ActivityId:
	{
		_1033: "Activity"
	}

,	ActivityType:
	{
		_1033: "Activity Type"
	}

,	ActualDuration:
	{
		_1033: "Actual Duration"
	}

,	ActualEnd:
	{
		_1033: "Actual End"
	}

,	ActualStart:
	{
		_1033: "Actual Start"
	}

,	BCC:
	{
		_1033: "BCC"
	}

,	CC:
	{
		_1033: "CC"
	}

,	SocialChannel:
	{
		_1033: "Social Channel"
	}

,	CreatedBy:
	{
		_1033: "Created By"
	}

,	DateCreated:
	{
		_1033: "Date Created"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	Customers:
	{
		_1033: "Customers"
	}

,	DateDeliveryLastAttempted:
	{
		_1033: "Date Delivery Last Attempted"
	}

,	DeliveryPriority:
	{
		_1033: "Delivery Priority"
	}

,	Message:
	{
		_1033: "Message"
	}

,	ExchangeItemID:
	{
		_1033: "Exchange Item ID"
	}

,	ExchangeRate:
	{
		_1033: "Exchange Rate"
	}

,	ExchangeWebLink:
	{
		_1033: "Exchange WebLink"
	}

,	From:
	{
		_1033: "From"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	RecurringInstanceType:
	{
		_1033: "Recurring Instance Type"
	}

,	IsBilled:
	{
		_1033: "Is Billed"
	}

,	IsPrivate:
	{
		_1033: "Is Private"
	}

,	IsRegularActivity:
	{
		_1033: "Is Regular Activity"
	}

,	IsWorkflowCreated:
	{
		_1033: "Is Workflow Created"
	}

,	LastOnHoldTime:
	{
		_1033: "Last On Hold Time"
	}

,	ContentModifiedOn:
	{
		_1033: "Content Modified On"
	}

,	GlobalMessage:
	{
		_1033: "Global Message"
	}

,	NotificationSource:
	{
		_1033: "Notification Source"
	}

,	RegardingID:
	{
		_1033: "Regarding ID"
	}

,	RegardingTypeCode:
	{
		_1033: "Regarding Type Code"
	}

,	Role:
	{
		_1033: "Role"
	}

,	Team:
	{
		_1033: "Team"
	}

,	User:
	{
		_1033: "User"
	}

,	LeftVoiceMail:
	{
		_1033: "Left Voice Mail"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	LastUpdated:
	{
		_1033: "Last Updated"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	OnHoldTimeMinutes:
	{
		_1033: "On Hold Time (Minutes)"
	}

,	OptionalAttendees:
	{
		_1033: "Optional Attendees"
	}

,	Organizer:
	{
		_1033: "Organizer"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	OutsourceVendors:
	{
		_1033: "Outsource Vendors"
	}

,	Delayactivityprocessinguntil:
	{
		_1033: "Delay activity processing until"
	}

,	Priority:
	{
		_1033: "Priority"
	}

,	Process:
	{
		_1033: "Process"
	}

,	Regarding:
	{
		_1033: "Regarding"
	}

,	RequiredAttendees:
	{
		_1033: "Required Attendees"
	}

,	Resources:
	{
		_1033: "Resources"
	}

,	ScheduledDuration:
	{
		_1033: "Scheduled Duration"
	}

,	DueDate:
	{
		_1033: "Due Date"
	}

,	StartDate:
	{
		_1033: "Start Date"
	}

,	SendersMailbox:
	{
		_1033: "Sender\'s Mailbox"
	}

,	DateSent:
	{
		_1033: "Date Sent"
	}

,	SeriesId:
	{
		_1033: "Series Id"
	}

,	Service:
	{
		_1033: "Service"
	}

,	SLA:
	{
		_1033: "SLA"
	}

,	LastSLAapplied:
	{
		_1033: "Last SLA applied"
	}

,	SortDate:
	{
		_1033: "Sort Date"
	}

,	ProcessStage:
	{
		_1033: "Process Stage"
	}

,	ActivityStatus:
	{
		_1033: "Activity Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	Title:
	{
		_1033: "Title"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	To:
	{
		_1033: "To"
	}

,	Currency:
	{
		_1033: "Currency"
	}

,	TraversedPath:
	{
		_1033: "Traversed Path"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.NotificationMessage.Relations =
{
	OneToN:
	{
		CampaignResponse_ldv_notificationmessages: "CampaignResponse_ldv_notificationmessages",
		ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId: "ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId",
		ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId: "ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId",
		ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId: "ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId",
		ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId: "ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId",
		ldv_notificationmessage_ActionCards: "ldv_notificationmessage_ActionCards",
		ActivityPartysOfActivity: "ldv_notificationmessage_activity_parties",
		ldv_notificationmessage_Annotations: "ldv_notificationmessage_Annotations",
		ldv_notificationmessage_AsyncOperations: "ldv_notificationmessage_AsyncOperations",
		ldv_notificationmessage_BulkDeleteFailures: "ldv_notificationmessage_BulkDeleteFailures",
		ldv_notificationmessage_connections1: "ldv_notificationmessage_connections1",
		ldv_notificationmessage_connections2: "ldv_notificationmessage_connections2",
		ldv_notificationmessage_Feedback: "ldv_notificationmessage_Feedback",
		ldv_notificationmessage_MailboxTrackingFolders: "ldv_notificationmessage_MailboxTrackingFolders",
		ldv_notificationmessage_PrincipalObjectAttributeAccesses: "ldv_notificationmessage_PrincipalObjectAttributeAccesses",
		ldv_notificationmessage_ProcessSession: "ldv_notificationmessage_ProcessSession",
		ldv_notificationmessage_QueueItems: "ldv_notificationmessage_QueueItems",
		ldv_notificationmessage_SyncErrors: "ldv_notificationmessage_SyncErrors",
		ldv_notificationmessage_UserEntityInstanceDatas: "ldv_notificationmessage_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		account_ldv_notificationmessages: "account_ldv_notificationmessages",
		activity_pointer_ldv_notificationmessage: "activity_pointer_ldv_notificationmessage",
		bookableresourcebooking_ldv_notificationmessages: "bookableresourcebooking_ldv_notificationmessages",
		bookableresourcebookingheader_ldv_notificationmessages: "bookableresourcebookingheader_ldv_notificationmessages",
		bulkoperation_ldv_notificationmessages: "bulkoperation_ldv_notificationmessages",
		campaign_ldv_notificationmessages: "campaign_ldv_notificationmessages",
		campaignactivity_ldv_notificationmessages: "campaignactivity_ldv_notificationmessages",
		contact_ldv_notificationmessages: "contact_ldv_notificationmessages",
		contract_ldv_notificationmessages: "contract_ldv_notificationmessages",
		entitlement_ldv_notificationmessages: "entitlement_ldv_notificationmessages",
		entitlementtemplate_ldv_notificationmessages: "entitlementtemplate_ldv_notificationmessages",
		incident_ldv_notificationmessages: "incident_ldv_notificationmessages",
		interactionforemail_ldv_notificationmessages: "interactionforemail_ldv_notificationmessages",
		invoice_ldv_notificationmessages: "invoice_ldv_notificationmessages",
		knowledgearticle_ldv_notificationmessages: "knowledgearticle_ldv_notificationmessages",
		knowledgebaserecord_ldv_notificationmessages: "knowledgebaserecord_ldv_notificationmessages",
		ldv_notificationmessage_businessunit_owningbusinessunit: "ldv_notificationmessage_businessunit_owningbusinessunit",
		ldv_notificationmessage_mailbox_sendermailboxid: "ldv_notificationmessage_mailbox_sendermailboxid",
		ldv_notificationmessage_owner_ownerid: "ldv_notificationmessage_owner_ownerid",
		ldv_notificationmessage_service_serviceid: "ldv_notificationmessage_service_serviceid",
		ldv_notificationmessage_sla_slaid: "ldv_notificationmessage_sla_slaid",
		ldv_notificationmessage_sla_slainvokedid: "ldv_notificationmessage_sla_slainvokedid",
		ldv_notificationmessage_systemuser_createdby: "ldv_notificationmessage_systemuser_createdby",
		ldv_notificationmessage_systemuser_createdonbehalfby: "ldv_notificationmessage_systemuser_createdonbehalfby",
		ldv_notificationmessage_systemuser_modifiedby: "ldv_notificationmessage_systemuser_modifiedby",
		ldv_notificationmessage_systemuser_modifiedonbehalfby: "ldv_notificationmessage_systemuser_modifiedonbehalfby",
		ldv_notificationmessage_systemuser_owninguser: "ldv_notificationmessage_systemuser_owninguser",
		ldv_notificationmessage_team_owningteam: "ldv_notificationmessage_team_owningteam",
		ldv_notificationmessage_transactioncurrency_transactioncurrencyid: "ldv_notificationmessage_transactioncurrency_transactioncurrencyid",
		NotificationAsRegarding: "ldv_notifications_ldv_notificationmessages",
		NotificationTemplateAsRegarding: "ldv_notificationtemplate_ldv_notificationmessages",
		ldv_role_ldv_notificationmessage_RoleId: "ldv_role_ldv_notificationmessage_RoleId",
		ldv_roleconfiguration_ldv_notificationmessages: "ldv_roleconfiguration_ldv_notificationmessages",
		ldv_systemuser_ldv_notificationmessage_UserId: "ldv_systemuser_ldv_notificationmessage_UserId",
		ldv_team_ldv_notificationmessage_TeamId: "ldv_team_ldv_notificationmessage_TeamId",
		ldv_test_ldv_notificationmessages: "ldv_test_ldv_notificationmessages",
		lead_ldv_notificationmessages: "lead_ldv_notificationmessages",
		msdyn_postalbum_ldv_notificationmessages: "msdyn_postalbum_ldv_notificationmessages",
		opportunity_ldv_notificationmessages: "opportunity_ldv_notificationmessages",
		quote_ldv_notificationmessages: "quote_ldv_notificationmessages",
		salesorder_ldv_notificationmessages: "salesorder_ldv_notificationmessages"
,
		Lookups:
		{
			account_ldv_notificationmessages: "regardingobjectid",
			activity_pointer_ldv_notificationmessage: "activityid",
			bookableresourcebooking_ldv_notificationmessages: "regardingobjectid",
			bookableresourcebookingheader_ldv_notificationmessages: "regardingobjectid",
			bulkoperation_ldv_notificationmessages: "regardingobjectid",
			campaign_ldv_notificationmessages: "regardingobjectid",
			campaignactivity_ldv_notificationmessages: "regardingobjectid",
			contact_ldv_notificationmessages: "regardingobjectid",
			contract_ldv_notificationmessages: "regardingobjectid",
			entitlement_ldv_notificationmessages: "regardingobjectid",
			entitlementtemplate_ldv_notificationmessages: "regardingobjectid",
			incident_ldv_notificationmessages: "regardingobjectid",
			interactionforemail_ldv_notificationmessages: "regardingobjectid",
			invoice_ldv_notificationmessages: "regardingobjectid",
			knowledgearticle_ldv_notificationmessages: "regardingobjectid",
			knowledgebaserecord_ldv_notificationmessages: "regardingobjectid",
			ldv_notificationmessage_businessunit_owningbusinessunit: "owningbusinessunit",
			ldv_notificationmessage_mailbox_sendermailboxid: "sendermailboxid",
			ldv_notificationmessage_owner_ownerid: "ownerid",
			ldv_notificationmessage_service_serviceid: "serviceid",
			ldv_notificationmessage_sla_slaid: "slaid",
			ldv_notificationmessage_sla_slainvokedid: "slainvokedid",
			ldv_notificationmessage_systemuser_createdby: "createdby",
			ldv_notificationmessage_systemuser_createdonbehalfby: "createdonbehalfby",
			ldv_notificationmessage_systemuser_modifiedby: "modifiedby",
			ldv_notificationmessage_systemuser_modifiedonbehalfby: "modifiedonbehalfby",
			ldv_notificationmessage_systemuser_owninguser: "owninguser",
			ldv_notificationmessage_team_owningteam: "owningteam",
			ldv_notificationmessage_transactioncurrency_transactioncurrencyid: "transactioncurrencyid",
			NotificationAsRegarding: "regardingobjectid",
			NotificationTemplateAsRegarding: "regardingobjectid",
			ldv_role_ldv_notificationmessage_RoleId: "ldv_roleid",
			ldv_roleconfiguration_ldv_notificationmessages: "regardingobjectid",
			ldv_systemuser_ldv_notificationmessage_UserId: "ldv_userid",
			ldv_team_ldv_notificationmessage_TeamId: "ldv_teamid",
			ldv_test_ldv_notificationmessages: "regardingobjectid",
			lead_ldv_notificationmessages: "regardingobjectid",
			msdyn_postalbum_ldv_notificationmessages: "regardingobjectid",
			opportunity_ldv_notificationmessages: "regardingobjectid",
			quote_ldv_notificationmessages: "regardingobjectid",
			salesorder_ldv_notificationmessages: "regardingobjectid"
		}
	},

	NToN:
	{
	}
}

Sdk.NotificationRecipient =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 CustomRecipientEntity: "ldv_customrecipiententity",
	 CustomRecipientFilterConditions: "ldv_customrecipientfilterconditions",
	 EmailTargetField: "ldv_emailtargetfieldcode",
	 FieldValue: "ldv_fieldvalue",
	 InternalRecipientType: "ldv_internalrecipienttypecode",
	 SendtoAccount: "ldv_issendtoaccount",
	 SendtoContact: "ldv_issendtocontact",
	 Language: "ldv_language",
	 LanguageField: "ldv_languagefield",
	 Name: "ldv_name",
	 NotificationRecipientId: "ldv_notificationrecipientid",
	 Role: "ldv_roleid",
	 SendConditionEntity: "ldv_sendconditionentity",
	 SendConditions: "ldv_sendconditions",
	 Type: "ldv_typecode",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.NotificationRecipient.DisplayName = "Notification Recipient";
Sdk.NotificationRecipient.SchemaName = "ldv_notificationrecipient";
Sdk.NotificationRecipient.EntityLogicalName = "ldv_notificationrecipient";

Sdk.NotificationRecipient.EmailTargetFieldEnum =
{
	To: 1,
	CC: 2,
	BCC: 3
}

Sdk.NotificationRecipient.InternalRecipientTypeEnum =
{
	CurrentOwner: 4,
	CurrentOwnersManager: 2,
	Role: 1
}

Sdk.NotificationRecipient.SendtoAccountEnum =
{
	Yes: 1,
	No: 0
}

Sdk.NotificationRecipient.SendtoContactEnum =
{
	Yes: 1,
	No: 0
}

Sdk.NotificationRecipient.LanguageEnum =
{
	English: 1033,
	Arabic: 1025
}

Sdk.NotificationRecipient.TypeEnum =
{
	Internal: 2,
	External: 1,
	FieldValue: 3,
	Custom: 4
}

Sdk.NotificationRecipient.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.NotificationRecipient.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.NotificationRecipient.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	CustomRecipientEntity: "ldv_CustomRecipientEntity",
	CustomRecipientFilterConditions: "ldv_CustomRecipientFilterConditions",
	EmailTargetField: "ldv_EmailTargetFieldCode",
	FieldValue: "ldv_FieldValue",
	InternalRecipientType: "ldv_InternalRecipientTypeCode",
	SendtoAccount: "ldv_IsSendToAccount",
	SendtoContact: "ldv_IsSendToContact",
	Language: "ldv_Language",
	LanguageField: "ldv_LanguageField",
	Name: "ldv_name",
	NotificationRecipientId: "ldv_notificationrecipientId",
	Role: "ldv_RoleId",
	SendConditionEntity: "ldv_SendConditionEntity",
	SendConditions: "ldv_SendConditions",
	Type: "ldv_TypeCode",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.NotificationRecipient.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	CustomRecipientEntity:
	{
		_1033: "Custom Recipient Entity"
	}

,	CustomRecipientFilterConditions:
	{
		_1033: "Custom Recipient Filter Conditions"
	}

,	EmailTargetField:
	{
		_1033: "Email Target Field"
	}

,	FieldValue:
	{
		_1033: "Field Value"
	}

,	InternalRecipientType:
	{
		_1033: "Internal Recipient Type"
	}

,	SendtoAccount:
	{
		_1033: "Send to Account"
	}

,	SendtoContact:
	{
		_1033: "Send to Contact"
	}

,	Language:
	{
		_1033: "Language"
	}

,	LanguageField:
	{
		_1033: "Language Field"
	}

,	Name:
	{
		_1033: "Name"
	}

,	NotificationRecipientId:
	{
		_1033: "Notification Recipient"
	}

,	Role:
	{
		_1033: "Role"
	}

,	SendConditionEntity:
	{
		_1033: "Send-Condition Entity"
	}

,	SendConditions:
	{
		_1033: "Send Conditions"
	}

,	Type:
	{
		_1033: "Type"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.NotificationRecipient.Relations =
{
	OneToN:
	{
		ldv_notificationrecipient_AsyncOperations: "ldv_notificationrecipient_AsyncOperations",
		ldv_notificationrecipient_BulkDeleteFailures: "ldv_notificationrecipient_BulkDeleteFailures",
		ldv_notificationrecipient_MailboxTrackingFolders: "ldv_notificationrecipient_MailboxTrackingFolders",
		ldv_notificationrecipient_PrincipalObjectAttributeAccesses: "ldv_notificationrecipient_PrincipalObjectAttributeAccesses",
		ldv_notificationrecipient_ProcessSession: "ldv_notificationrecipient_ProcessSession",
		ldv_notificationrecipient_SyncErrors: "ldv_notificationrecipient_SyncErrors",
		ldv_notificationrecipient_UserEntityInstanceDatas: "ldv_notificationrecipient_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_notificationrecipient: "business_unit_ldv_notificationrecipient",
		ldv_ldv_roleconfiguration_ldv_notificationrecipient_RoleId: "ldv_ldv_roleconfiguration_ldv_notificationrecipient_RoleId",
		lk_ldv_notificationrecipient_createdby: "lk_ldv_notificationrecipient_createdby",
		lk_ldv_notificationrecipient_createdonbehalfby: "lk_ldv_notificationrecipient_createdonbehalfby",
		lk_ldv_notificationrecipient_modifiedby: "lk_ldv_notificationrecipient_modifiedby",
		lk_ldv_notificationrecipient_modifiedonbehalfby: "lk_ldv_notificationrecipient_modifiedonbehalfby",
		owner_ldv_notificationrecipient: "owner_ldv_notificationrecipient",
		team_ldv_notificationrecipient: "team_ldv_notificationrecipient",
		user_ldv_notificationrecipient: "user_ldv_notificationrecipient"
,
		Lookups:
		{
			business_unit_ldv_notificationrecipient: "owningbusinessunit",
			ldv_ldv_roleconfiguration_ldv_notificationrecipient_RoleId: "ldv_roleid",
			lk_ldv_notificationrecipient_createdby: "createdby",
			lk_ldv_notificationrecipient_createdonbehalfby: "createdonbehalfby",
			lk_ldv_notificationrecipient_modifiedby: "modifiedby",
			lk_ldv_notificationrecipient_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_notificationrecipient: "ownerid",
			team_ldv_notificationrecipient: "owningteam",
			user_ldv_notificationrecipient: "owninguser"
		}
	},

	NToN:
	{
		NotificationsOfldv_notification_ldv_recipient: "ldv_notification_ldv_recipient"
	}
}

Sdk.Notification =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 EmailTemplate: "ldv_emailtemplateid",
	 EntityLogicalName_ldv_EntityLogicalName: "ldv_entitylogicalname",
	 From: "ldv_fromid",
	 SendAsync: "ldv_issendasync",
	 SendEmail: "ldv_issendemail",
	 SendPushMessage: "ldv_issendpushmessage",
	 SendSMS: "ldv_issendsms",
	 IsUseDefaultFrom: "ldv_isusedefaultfrom",
	 Name: "ldv_name",
	 NotificationsId: "ldv_notificationsid",
	 PushMessageTemplate: "ldv_pushmessagetemplateid",
	 SendCondition: "ldv_sendcondition",
	 SMSTemplate: "ldv_smstemplateid",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 ProcessId: "processid",
	 StageId: "stageid",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 TraversedPath: "traversedpath",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.Notification.DisplayName = "Notification";
Sdk.Notification.SchemaName = "ldv_notifications";
Sdk.Notification.EntityLogicalName = "ldv_notifications";

Sdk.Notification.SendAsyncEnum =
{
	Yes: 1,
	No: 0
}

Sdk.Notification.SendEmailEnum =
{
	Yes: 1,
	No: 0
}

Sdk.Notification.SendPushMessageEnum =
{
	Yes: 1,
	No: 0
}

Sdk.Notification.SendSMSEnum =
{
	Yes: 1,
	No: 0
}

Sdk.Notification.IsUseDefaultFromEnum =
{
	Yes: 1,
	No: 0
}

Sdk.Notification.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.Notification.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.Notification.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	EmailTemplate: "ldv_EmailTemplateId",
	EntityLogicalName_ldv_EntityLogicalName: "ldv_EntityLogicalName",
	From: "ldv_FromID",
	SendAsync: "ldv_IsSendAsync",
	SendEmail: "ldv_IsSendEmail",
	SendPushMessage: "ldv_IsSendPushMessage",
	SendSMS: "ldv_IsSendSMS",
	IsUseDefaultFrom: "ldv_IsUseDefaultFrom",
	Name: "ldv_name",
	NotificationsId: "ldv_notificationsId",
	PushMessageTemplate: "ldv_PushMessageTemplateId",
	SendCondition: "ldv_SendCondition",
	SMSTemplate: "ldv_SMSTemplateId",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	ProcessId: "processid",
	StageId: "stageid",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	TraversedPath: "traversedpath",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.Notification.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	EmailTemplate:
	{
		_1033: "Email Template"
	}

,	EntityLogicalName_ldv_EntityLogicalName:
	{
		_1033: "Entity Logical Name"
	}

,	From:
	{
		_1033: "From"
	}

,	SendAsync:
	{
		_1033: "Send Async"
	}

,	SendEmail:
	{
		_1033: "Send Email"
	}

,	SendPushMessage:
	{
		_1033: "Send Push Message"
	}

,	SendSMS:
	{
		_1033: "Send SMS"
	}

,	IsUseDefaultFrom:
	{
		_1033: "Use Default From"
	}

,	Name:
	{
		_1033: "Name"
	}

,	NotificationsId:
	{
		_1033: "Notifications"
	}

,	PushMessageTemplate:
	{
		_1033: "Push Message Template"
	}

,	SendCondition:
	{
		_1033: "Send Condition"
	}

,	SMSTemplate:
	{
		_1033: "SMS Template"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	ProcessId:
	{
		_1033: "Process Id"
	}

,	StageId:
	{
		_1033: "Stage Id"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	TraversedPath:
	{
		_1033: "Traversed Path"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.Notification.Relations =
{
	OneToN:
	{
		ldv_notifications_ActivityPointers: "ldv_notifications_ActivityPointers",
		ldv_notifications_Annotations: "ldv_notifications_Annotations",
		ldv_notifications_Appointments: "ldv_notifications_Appointments",
		ldv_notifications_AsyncOperations: "ldv_notifications_AsyncOperations",
		ldv_notifications_BulkDeleteFailures: "ldv_notifications_BulkDeleteFailures",
		ldv_notifications_connections1: "ldv_notifications_connections1",
		ldv_notifications_connections2: "ldv_notifications_connections2",
		ldv_notifications_DuplicateBaseRecord: "ldv_notifications_DuplicateBaseRecord",
		ldv_notifications_DuplicateMatchingRecord: "ldv_notifications_DuplicateMatchingRecord",
		ldv_notifications_Emails: "ldv_notifications_Emails",
		ldv_notifications_Faxes: "ldv_notifications_Faxes",
		NotificationMessagesOfRegarding: "ldv_notifications_ldv_notificationmessages",
		ldv_notifications_ldv_pushmessages: "ldv_notifications_ldv_pushmessages",
		ldv_notifications_ldv_smses: "ldv_notifications_ldv_smses",
		ldv_notifications_Letters: "ldv_notifications_Letters",
		ldv_notifications_MailboxTrackingFolders: "ldv_notifications_MailboxTrackingFolders",
		ldv_notifications_PhoneCalls: "ldv_notifications_PhoneCalls",
		ldv_notifications_PrincipalObjectAttributeAccesses: "ldv_notifications_PrincipalObjectAttributeAccesses",
		ldv_notifications_ProcessSession: "ldv_notifications_ProcessSession",
		ldv_notifications_RecurringAppointmentMasters: "ldv_notifications_RecurringAppointmentMasters",
		ldv_notifications_ServiceAppointments: "ldv_notifications_ServiceAppointments",
		ldv_notifications_SocialActivities: "ldv_notifications_SocialActivities",
		ldv_notifications_SyncErrors: "ldv_notifications_SyncErrors",
		ldv_notifications_Tasks: "ldv_notifications_Tasks",
		ldv_notifications_UserEntityInstanceDatas: "ldv_notifications_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_notifications: "business_unit_ldv_notifications",
		NotificationTemplateAsEmailTemplate: "ldv_ldv_notificationtemplate_ldv_notifications_EmailTemplate",
		NotificationTemplateAsPushMessageTemplate: "ldv_ldv_notificationtemplate_ldv_notifications_PushMessageTemplateId",
		NotificationTemplateAsSMSTemplate: "ldv_ldv_notificationtemplate_ldv_notifications_SMSTemplateId",
		ldv_systemuser_ldv_notifications_FromID: "ldv_systemuser_ldv_notifications_FromID",
		lk_ldv_notifications_createdby: "lk_ldv_notifications_createdby",
		lk_ldv_notifications_createdonbehalfby: "lk_ldv_notifications_createdonbehalfby",
		lk_ldv_notifications_modifiedby: "lk_ldv_notifications_modifiedby",
		lk_ldv_notifications_modifiedonbehalfby: "lk_ldv_notifications_modifiedonbehalfby",
		owner_ldv_notifications: "owner_ldv_notifications",
		processstage_ldv_notifications: "processstage_ldv_notifications",
		team_ldv_notifications: "team_ldv_notifications",
		user_ldv_notifications: "user_ldv_notifications"
,
		Lookups:
		{
			business_unit_ldv_notifications: "owningbusinessunit",
			NotificationTemplateAsEmailTemplate: "ldv_emailtemplateid",
			NotificationTemplateAsPushMessageTemplate: "ldv_pushmessagetemplateid",
			NotificationTemplateAsSMSTemplate: "ldv_smstemplateid",
			ldv_systemuser_ldv_notifications_FromID: "ldv_fromid",
			lk_ldv_notifications_createdby: "createdby",
			lk_ldv_notifications_createdonbehalfby: "createdonbehalfby",
			lk_ldv_notifications_modifiedby: "modifiedby",
			lk_ldv_notifications_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_notifications: "ownerid",
			processstage_ldv_notifications: "stageid",
			team_ldv_notifications: "owningteam",
			user_ldv_notifications: "owninguser"
		}
	},

	NToN:
	{
		NotificationAttachmentsOfldv_notification_ldv_notificationattachment: "ldv_notification_ldv_notificationattachment",
		NotificationRecipientsOfldv_notification_ldv_recipient: "ldv_notification_ldv_recipient",
		ldv_slaaction_notification: "ldv_slaaction_notification",
		TaskConfigurationsOfldv_taskconfiguration_notifications_Close: "ldv_taskconfiguration_notifications_Close",
		TaskConfigurationsOfldv_taskconfiguration_notifications_Create: "ldv_taskconfiguration_notifications_Create"
	}
}

Sdk.NotificationsCentreConfig =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 CounterLimit: "ldv_counterlimit",
	 CountPerPage: "ldv_countperpage",
	 Default: "ldv_isdefault",
	 PopupEnabled: "ldv_ispopupenabled",
	 Name: "ldv_name",
	 NotificationsCentreConfigId: "ldv_notificationscentreconfigid",
	 PopupTimeout: "ldv_popuptimeout",
	 RefreshInterval: "ldv_refreshinterval",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.NotificationsCentreConfig.DisplayName = "Notifications Centre Config";
Sdk.NotificationsCentreConfig.SchemaName = "ldv_notificationscentreconfig";
Sdk.NotificationsCentreConfig.EntityLogicalName = "ldv_notificationscentreconfig";

Sdk.NotificationsCentreConfig.DefaultEnum =
{
	Yes: 1,
	No: 0
}

Sdk.NotificationsCentreConfig.PopupEnabledEnum =
{
	Yes: 1,
	No: 0
}

Sdk.NotificationsCentreConfig.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.NotificationsCentreConfig.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.NotificationsCentreConfig.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	CounterLimit: "ldv_CounterLimit",
	CountPerPage: "ldv_CountPerPage",
	Default: "ldv_IsDefault",
	PopupEnabled: "ldv_IsPopupEnabled",
	Name: "ldv_name",
	NotificationsCentreConfigId: "ldv_notificationscentreconfigId",
	PopupTimeout: "ldv_PopupTimeout",
	RefreshInterval: "ldv_RefreshInterval",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.NotificationsCentreConfig.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	CounterLimit:
	{
		_1033: "Counter Limit"
	}

,	CountPerPage:
	{
		_1033: "Count Per Page"
	}

,	Default:
	{
		_1033: "Default"
	}

,	PopupEnabled:
	{
		_1033: "Popup Enabled"
	}

,	Name:
	{
		_1033: "Name"
	}

,	NotificationsCentreConfigId:
	{
		_1033: "Notifications Centre Config"
	}

,	PopupTimeout:
	{
		_1033: "Popup Timeout"
	}

,	RefreshInterval:
	{
		_1033: "Refresh Interval"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.NotificationsCentreConfig.Relations =
{
	OneToN:
	{
		ldv_notificationscentreconfig_AsyncOperations: "ldv_notificationscentreconfig_AsyncOperations",
		ldv_notificationscentreconfig_BulkDeleteFailures: "ldv_notificationscentreconfig_BulkDeleteFailures",
		ldv_notificationscentreconfig_MailboxTrackingFolders: "ldv_notificationscentreconfig_MailboxTrackingFolders",
		ldv_notificationscentreconfig_PrincipalObjectAttributeAccesses: "ldv_notificationscentreconfig_PrincipalObjectAttributeAccesses",
		ldv_notificationscentreconfig_ProcessSession: "ldv_notificationscentreconfig_ProcessSession",
		ldv_notificationscentreconfig_SyncErrors: "ldv_notificationscentreconfig_SyncErrors",
		ldv_notificationscentreconfig_UserEntityInstanceDatas: "ldv_notificationscentreconfig_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_notificationscentreconfig: "business_unit_ldv_notificationscentreconfig",
		lk_ldv_notificationscentreconfig_createdby: "lk_ldv_notificationscentreconfig_createdby",
		lk_ldv_notificationscentreconfig_createdonbehalfby: "lk_ldv_notificationscentreconfig_createdonbehalfby",
		lk_ldv_notificationscentreconfig_modifiedby: "lk_ldv_notificationscentreconfig_modifiedby",
		lk_ldv_notificationscentreconfig_modifiedonbehalfby: "lk_ldv_notificationscentreconfig_modifiedonbehalfby",
		owner_ldv_notificationscentreconfig: "owner_ldv_notificationscentreconfig",
		team_ldv_notificationscentreconfig: "team_ldv_notificationscentreconfig",
		user_ldv_notificationscentreconfig: "user_ldv_notificationscentreconfig"
,
		Lookups:
		{
			business_unit_ldv_notificationscentreconfig: "owningbusinessunit",
			lk_ldv_notificationscentreconfig_createdby: "createdby",
			lk_ldv_notificationscentreconfig_createdonbehalfby: "createdonbehalfby",
			lk_ldv_notificationscentreconfig_modifiedby: "modifiedby",
			lk_ldv_notificationscentreconfig_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_notificationscentreconfig: "ownerid",
			team_ldv_notificationscentreconfig: "owningteam",
			user_ldv_notificationscentreconfig: "owninguser"
		}
	},

	NToN:
	{
	}
}

Sdk.NotificationTemplate =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 UseRichEditor: "ldv_isusericheditor",
	 Language: "ldv_languagecode",
	 Name: "ldv_name",
	 NotificationTemplateId: "ldv_notificationtemplateid",
	 OriginalTemplate: "ldv_originaltemplateid",
	 PathSeparator: "ldv_pathseparator",
	 PlainTextBody: "ldv_plaintextbody",
	 RichTextBody: "ldv_richtextbody",
	 Title: "ldv_title",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 OrganizationId: "organizationid",
	 RecordCreatedOn: "overriddencreatedon",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.NotificationTemplate.DisplayName = "Notification Template";
Sdk.NotificationTemplate.SchemaName = "ldv_notificationtemplate";
Sdk.NotificationTemplate.EntityLogicalName = "ldv_notificationtemplate";

Sdk.NotificationTemplate.UseRichEditorEnum =
{
	Yes: 1,
	No: 0
}

Sdk.NotificationTemplate.LanguageEnum =
{
	English: 1033,
	Arabic: 1025
}

Sdk.NotificationTemplate.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.NotificationTemplate.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.NotificationTemplate.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	UseRichEditor: "ldv_IsUseRichEditor",
	Language: "ldv_LanguageCode",
	Name: "ldv_name",
	NotificationTemplateId: "ldv_notificationtemplateId",
	OriginalTemplate: "ldv_OriginalTemplateId",
	PathSeparator: "ldv_PathSeparator",
	PlainTextBody: "ldv_PlainTextBody",
	RichTextBody: "ldv_RichTextBody",
	Title: "ldv_Title",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	OrganizationId: "OrganizationId",
	RecordCreatedOn: "OverriddenCreatedOn",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.NotificationTemplate.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	UseRichEditor:
	{
		_1033: "Use Rich Editor"
	}

,	Language:
	{
		_1033: "Language"
	}

,	Name:
	{
		_1033: "Name"
	}

,	NotificationTemplateId:
	{
		_1033: "Notification Template"
	}

,	OriginalTemplate:
	{
		_1033: "Original Template"
	}

,	PathSeparator:
	{
		_1033: "Path Separator"
	}

,	PlainTextBody:
	{
		_1033: "Plain Text Body"
	}

,	RichTextBody:
	{
		_1033: "Rich Text Body"
	}

,	Title:
	{
		_1033: "Subject"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	OrganizationId:
	{
		_1033: "Organization Id"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.NotificationTemplate.Relations =
{
	OneToN:
	{
		NotificationAttachmentsOfHTML: "ldv_ldv_notificationtemplate_ldv_notificationattachment_HTMLId",
		NotificationsOfEmailTemplate: "ldv_ldv_notificationtemplate_ldv_notifications_EmailTemplate",
		NotificationsOfPushMessageTemplate: "ldv_ldv_notificationtemplate_ldv_notifications_PushMessageTemplateId",
		NotificationsOfSMSTemplate: "ldv_ldv_notificationtemplate_ldv_notifications_SMSTemplateId",
		NotificationTemplatesOfOriginalTemplate: "ldv_ldv_notificationtemplate_ldv_notificationtemplate_OriginalTemplateId",
		ldv_notificationtemplate_ActivityPointers: "ldv_notificationtemplate_ActivityPointers",
		ldv_notificationtemplate_Annotations: "ldv_notificationtemplate_Annotations",
		ldv_notificationtemplate_Appointments: "ldv_notificationtemplate_Appointments",
		ldv_notificationtemplate_AsyncOperations: "ldv_notificationtemplate_AsyncOperations",
		ldv_notificationtemplate_BulkDeleteFailures: "ldv_notificationtemplate_BulkDeleteFailures",
		ldv_notificationtemplate_connections1: "ldv_notificationtemplate_connections1",
		ldv_notificationtemplate_connections2: "ldv_notificationtemplate_connections2",
		ldv_notificationtemplate_DuplicateBaseRecord: "ldv_notificationtemplate_DuplicateBaseRecord",
		ldv_notificationtemplate_DuplicateMatchingRecord: "ldv_notificationtemplate_DuplicateMatchingRecord",
		ldv_notificationtemplate_Emails: "ldv_notificationtemplate_Emails",
		ldv_notificationtemplate_Faxes: "ldv_notificationtemplate_Faxes",
		NotificationMessagesOfRegarding: "ldv_notificationtemplate_ldv_notificationmessages",
		ldv_notificationtemplate_ldv_pushmessages: "ldv_notificationtemplate_ldv_pushmessages",
		ldv_notificationtemplate_ldv_smses: "ldv_notificationtemplate_ldv_smses",
		ldv_notificationtemplate_Letters: "ldv_notificationtemplate_Letters",
		ldv_notificationtemplate_MailboxTrackingFolders: "ldv_notificationtemplate_MailboxTrackingFolders",
		ldv_notificationtemplate_PhoneCalls: "ldv_notificationtemplate_PhoneCalls",
		ldv_notificationtemplate_PrincipalObjectAttributeAccesses: "ldv_notificationtemplate_PrincipalObjectAttributeAccesses",
		ldv_notificationtemplate_ProcessSession: "ldv_notificationtemplate_ProcessSession",
		ldv_notificationtemplate_RecurringAppointmentMasters: "ldv_notificationtemplate_RecurringAppointmentMasters",
		ldv_notificationtemplate_ServiceAppointments: "ldv_notificationtemplate_ServiceAppointments",
		ldv_notificationtemplate_SocialActivities: "ldv_notificationtemplate_SocialActivities",
		ldv_notificationtemplate_SyncErrors: "ldv_notificationtemplate_SyncErrors",
		ldv_notificationtemplate_Tasks: "ldv_notificationtemplate_Tasks",
		ldv_notificationtemplate_UserEntityInstanceDatas: "ldv_notificationtemplate_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		NotificationTemplateAsOriginalTemplate: "ldv_ldv_notificationtemplate_ldv_notificationtemplate_OriginalTemplateId",
		lk_ldv_notificationtemplate_createdby: "lk_ldv_notificationtemplate_createdby",
		lk_ldv_notificationtemplate_createdonbehalfby: "lk_ldv_notificationtemplate_createdonbehalfby",
		lk_ldv_notificationtemplate_modifiedby: "lk_ldv_notificationtemplate_modifiedby",
		lk_ldv_notificationtemplate_modifiedonbehalfby: "lk_ldv_notificationtemplate_modifiedonbehalfby",
		organization_ldv_notificationtemplate: "organization_ldv_notificationtemplate"
,
		Lookups:
		{
			NotificationTemplateAsOriginalTemplate: "ldv_originaltemplateid",
			lk_ldv_notificationtemplate_createdby: "createdby",
			lk_ldv_notificationtemplate_createdonbehalfby: "createdonbehalfby",
			lk_ldv_notificationtemplate_modifiedby: "modifiedby",
			lk_ldv_notificationtemplate_modifiedonbehalfby: "modifiedonbehalfby",
			organization_ldv_notificationtemplate: "organizationid"
		}
	},

	NToN:
	{
		NotificationTemplateTablesOfldv_notificationtmpl_ldv_notificationtable: "ldv_notificationtmpl_ldv_notificationtable"
	}
}

Sdk.NotificationTemplateTable =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 EntityLogicalName_ldv_EntityLogicalName: "ldv_entitylogicalname",
	 EntityName: "ldv_entityname",
	 FilterConditions: "ldv_filterconditions",
	 Name: "ldv_name",
	 NotificationTemplateRelationId: "ldv_notificationtemplaterelationid",
	 TableDefinition: "ldv_tabledefinition",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.NotificationTemplateTable.DisplayName = "Notification Template Table";
Sdk.NotificationTemplateTable.SchemaName = "ldv_notificationtemplaterelation";
Sdk.NotificationTemplateTable.EntityLogicalName = "ldv_notificationtemplaterelation";

Sdk.NotificationTemplateTable.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.NotificationTemplateTable.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.NotificationTemplateTable.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	EntityLogicalName_ldv_EntityLogicalName: "ldv_EntityLogicalName",
	EntityName: "ldv_EntityName",
	FilterConditions: "ldv_FilterConditions",
	Name: "ldv_name",
	NotificationTemplateRelationId: "ldv_notificationtemplaterelationId",
	TableDefinition: "ldv_TableDefinition",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.NotificationTemplateTable.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	EntityLogicalName_ldv_EntityLogicalName:
	{
		_1033: "Entity Logical Name"
	}

,	EntityName:
	{
		_1033: "Entity Name"
	}

,	FilterConditions:
	{
		_1033: "Filter Conditions"
	}

,	Name:
	{
		_1033: "Name"
	}

,	NotificationTemplateRelationId:
	{
		_1033: "Notification Template Relation"
	}

,	TableDefinition:
	{
		_1033: "Table Definition"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.NotificationTemplateTable.Relations =
{
	OneToN:
	{
		ldv_notificationtemplaterelation_AsyncOperations: "ldv_notificationtemplaterelation_AsyncOperations",
		ldv_notificationtemplaterelation_BulkDeleteFailures: "ldv_notificationtemplaterelation_BulkDeleteFailures",
		ldv_notificationtemplaterelation_MailboxTrackingFolders: "ldv_notificationtemplaterelation_MailboxTrackingFolders",
		ldv_notificationtemplaterelation_PrincipalObjectAttributeAccesses: "ldv_notificationtemplaterelation_PrincipalObjectAttributeAccesses",
		ldv_notificationtemplaterelation_ProcessSession: "ldv_notificationtemplaterelation_ProcessSession",
		ldv_notificationtemplaterelation_SyncErrors: "ldv_notificationtemplaterelation_SyncErrors",
		ldv_notificationtemplaterelation_UserEntityInstanceDatas: "ldv_notificationtemplaterelation_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_notificationtemplaterelation: "business_unit_ldv_notificationtemplaterelation",
		lk_ldv_notificationtemplaterelation_createdby: "lk_ldv_notificationtemplaterelation_createdby",
		lk_ldv_notificationtemplaterelation_createdonbehalfby: "lk_ldv_notificationtemplaterelation_createdonbehalfby",
		lk_ldv_notificationtemplaterelation_modifiedby: "lk_ldv_notificationtemplaterelation_modifiedby",
		lk_ldv_notificationtemplaterelation_modifiedonbehalfby: "lk_ldv_notificationtemplaterelation_modifiedonbehalfby",
		owner_ldv_notificationtemplaterelation: "owner_ldv_notificationtemplaterelation",
		team_ldv_notificationtemplaterelation: "team_ldv_notificationtemplaterelation",
		user_ldv_notificationtemplaterelation: "user_ldv_notificationtemplaterelation"
,
		Lookups:
		{
			business_unit_ldv_notificationtemplaterelation: "owningbusinessunit",
			lk_ldv_notificationtemplaterelation_createdby: "createdby",
			lk_ldv_notificationtemplaterelation_createdonbehalfby: "createdonbehalfby",
			lk_ldv_notificationtemplaterelation_modifiedby: "modifiedby",
			lk_ldv_notificationtemplaterelation_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_notificationtemplaterelation: "ownerid",
			team_ldv_notificationtemplaterelation: "owningteam",
			user_ldv_notificationtemplaterelation: "owninguser"
		}
	},

	NToN:
	{
		NotificationTemplatesOfldv_notificationtmpl_ldv_notificationtable: "ldv_notificationtmpl_ldv_notificationtable"
	}
}

Sdk.RecurrenceRule =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 DailyFrequency: "ldv_dailyfrequency",
	 DayOccurrences: "ldv_dayoccurrences",
	 DaysOfTheMonth: "ldv_daysofthemonth",
	 EndDate: "ldv_enddate",
	 ExceptionUpdatedTrigger: "ldv_exceptionupdatedtrigger",
	 HourlyFrequency: "ldv_hourlyfrequency",
	 MinuteFrequency: "ldv_minutefrequency",
	 MonthlyDayOccurrence: "ldv_monthlydayoccurrence",
	 MonthlyPattern: "ldv_monthlypattern",
	 MonthOfYear: "ldv_monthofyear",
	 Months: "ldv_months",
	 Name: "ldv_name",
	 OccurrenceCount: "ldv_occurrencecount",
	 RecurrencePattern: "ldv_recurrencepattern",
	 RecurrenceRuleId: "ldv_recurrenceruleid",
	 StartDate: "ldv_startdate",
	 WeekDay: "ldv_weekday",
	 WeekDays: "ldv_weekdays",
	 WeeklyFrequency: "ldv_weeklyfrequency",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.RecurrenceRule.DisplayName = "Recurrence Rule";
Sdk.RecurrenceRule.SchemaName = "ldv_recurrencerule";
Sdk.RecurrenceRule.EntityLogicalName = "ldv_recurrencerule";

Sdk.RecurrenceRule.MonthlyDayOccurrenceEnum =
{
	First: 1,
	Second: 2,
	Third: 3,
	Fourth: 4,
	Last: 5
}

Sdk.RecurrenceRule.MonthlyPatternEnum =
{
	SpecificDays: 1,
	DayOccurrence: 2
}

Sdk.RecurrenceRule.MonthOfYearEnum =
{
	January: 1,
	February: 2,
	March: 3,
	April: 4,
	May: 5,
	June: 6,
	July: 7,
	August: 8,
	September: 9,
	October: 10,
	November: 11,
	December: 12
}

Sdk.RecurrenceRule.RecurrencePatternEnum =
{
	EveryMinute: 1,
	Hourly: 2,
	Daily: 3,
	Weekly: 4,
	Monthly: 5
}

Sdk.RecurrenceRule.WeekDayEnum =
{
	Sunday: 1,
	Monday: 2,
	Tuesday: 3,
	Wednesday: 4,
	Thursday: 5,
	Friday: 6,
	Saturday: 7
}

Sdk.RecurrenceRule.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.RecurrenceRule.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.RecurrenceRule.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	DailyFrequency: "ldv_DailyFrequency",
	DayOccurrences: "ldv_DayOccurrences",
	DaysOfTheMonth: "ldv_DaysOfTheMonth",
	EndDate: "ldv_EndDate",
	ExceptionUpdatedTrigger: "ldv_ExceptionUpdatedTrigger",
	HourlyFrequency: "ldv_HourlyFrequency",
	MinuteFrequency: "ldv_MinuteFrequency",
	MonthlyDayOccurrence: "ldv_MonthlyDayOccurrence",
	MonthlyPattern: "ldv_MonthlyPattern",
	MonthOfYear: "ldv_MonthOfYear",
	Months: "ldv_Months",
	Name: "ldv_name",
	OccurrenceCount: "ldv_OccurrenceCount",
	RecurrencePattern: "ldv_RecurrencePattern",
	RecurrenceRuleId: "ldv_recurrenceruleId",
	StartDate: "ldv_StartDate",
	WeekDay: "ldv_WeekDay",
	WeekDays: "ldv_WeekDays",
	WeeklyFrequency: "ldv_WeeklyFrequency",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.RecurrenceRule.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	DailyFrequency:
	{
		_1033: "Daily Frequency"
	}

,	DayOccurrences:
	{
		_1033: "Day Occurrences"
	}

,	DaysOfTheMonth:
	{
		_1033: "Days Of The Month"
	}

,	EndDate:
	{
		_1033: "End Date"
	}

,	ExceptionUpdatedTrigger:
	{
		_1033: "Exception Updated Trigger"
	}

,	HourlyFrequency:
	{
		_1033: "Hourly Frequency"
	}

,	MinuteFrequency:
	{
		_1033: "Minute Frequency"
	}

,	MonthlyDayOccurrence:
	{
		_1033: "Monthly Day Occurrence"
	}

,	MonthlyPattern:
	{
		_1033: "Monthly Pattern"
	}

,	MonthOfYear:
	{
		_1033: "Month Of Year"
	}

,	Months:
	{
		_1033: "Months"
	}

,	Name:
	{
		_1033: "Name"
	}

,	OccurrenceCount:
	{
		_1033: "Occurrence Count"
	}

,	RecurrencePattern:
	{
		_1033: "Recurrence Pattern"
	}

,	RecurrenceRuleId:
	{
		_1033: "Recurrence Rule"
	}

,	StartDate:
	{
		_1033: "Start Date"
	}

,	WeekDay:
	{
		_1033: "Week Day"
	}

,	WeekDays:
	{
		_1033: "Week Days"
	}

,	WeeklyFrequency:
	{
		_1033: "Weekly Frequency"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.RecurrenceRule.Relations =
{
	OneToN:
	{
		CustomJobsOfRetrySchedule: "ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule",
		ldv_recurrencerule_AsyncOperations: "ldv_recurrencerule_AsyncOperations",
		ldv_recurrencerule_BulkDeleteFailures: "ldv_recurrencerule_BulkDeleteFailures",
		CustomJobsOfSubJobsRetrySchedule: "ldv_recurrencerule_customjob_SubJobsRetryScheduleId",
		ldv_recurrencerule_MailboxTrackingFolders: "ldv_recurrencerule_MailboxTrackingFolders",
		ldv_recurrencerule_PrincipalObjectAttributeAccesses: "ldv_recurrencerule_PrincipalObjectAttributeAccesses",
		ldv_recurrencerule_ProcessSession: "ldv_recurrencerule_ProcessSession",
		ldv_recurrencerule_SyncErrors: "ldv_recurrencerule_SyncErrors",
		ldv_recurrencerule_UserEntityInstanceDatas: "ldv_recurrencerule_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_recurrencerule: "business_unit_ldv_recurrencerule",
		lk_ldv_recurrencerule_createdby: "lk_ldv_recurrencerule_createdby",
		lk_ldv_recurrencerule_createdonbehalfby: "lk_ldv_recurrencerule_createdonbehalfby",
		lk_ldv_recurrencerule_modifiedby: "lk_ldv_recurrencerule_modifiedby",
		lk_ldv_recurrencerule_modifiedonbehalfby: "lk_ldv_recurrencerule_modifiedonbehalfby",
		owner_ldv_recurrencerule: "owner_ldv_recurrencerule",
		team_ldv_recurrencerule: "team_ldv_recurrencerule",
		user_ldv_recurrencerule: "user_ldv_recurrencerule"
,
		Lookups:
		{
			business_unit_ldv_recurrencerule: "owningbusinessunit",
			lk_ldv_recurrencerule_createdby: "createdby",
			lk_ldv_recurrencerule_createdonbehalfby: "createdonbehalfby",
			lk_ldv_recurrencerule_modifiedby: "modifiedby",
			lk_ldv_recurrencerule_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_recurrencerule: "ownerid",
			team_ldv_recurrencerule: "owningteam",
			user_ldv_recurrencerule: "owninguser"
		}
	},

	NToN:
	{
		CustomJobsOfldv_ldv_customjob_ldv_recurrencerule: "ldv_ldv_customjob_ldv_recurrencerule",
		ldv_ldv_recurrencerule_ldv_recurrenceexgroup: "ldv_ldv_recurrencerule_ldv_recurrenceexgroup",
		RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce: "ldv_ldv_recurrencerule_ldv_recurrenceruleexce"
	}
}

Sdk.RecurrenceRuleException =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 DayOccurrences: "ldv_dayoccurrences",
	 DaysOfTheMonth: "ldv_daysofthemonth",
	 EndDate: "ldv_enddate",
	 Hours: "ldv_hours",
	 Minutes: "ldv_minutes",
	 Month: "ldv_month",
	 MonthlyDayOccurrence: "ldv_monthlydayoccurrence",
	 Months: "ldv_months",
	 Name: "ldv_name",
	 RecurrenceRuleExceptionId: "ldv_recurrenceruleexceptionid",
	 StartDate: "ldv_startdate",
	 WeekDay: "ldv_weekday",
	 WeekDays: "ldv_weekdays",
	 Years: "ldv_years",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.RecurrenceRuleException.DisplayName = "Recurrence Rule Exception";
Sdk.RecurrenceRuleException.SchemaName = "ldv_recurrenceruleexception";
Sdk.RecurrenceRuleException.EntityLogicalName = "ldv_recurrenceruleexception";

Sdk.RecurrenceRuleException.MonthEnum =
{
	January: 1,
	February: 2,
	March: 3,
	April: 4,
	May: 5,
	June: 6,
	July: 7,
	August: 8,
	September: 9,
	October: 10,
	November: 11,
	December: 12
}

Sdk.RecurrenceRuleException.MonthlyDayOccurrenceEnum =
{
	First: 1,
	Second: 2,
	Third: 3,
	Fourth: 4,
	Last: 5
}

Sdk.RecurrenceRuleException.WeekDayEnum =
{
	Sunday: 1,
	Monday: 2,
	Tuesday: 3,
	Wednesday: 4,
	Thursday: 5,
	Friday: 6,
	Saturday: 7
}

Sdk.RecurrenceRuleException.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.RecurrenceRuleException.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.RecurrenceRuleException.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	DayOccurrences: "ldv_DayOccurrences",
	DaysOfTheMonth: "ldv_DaysOfTheMonth",
	EndDate: "ldv_EndDate",
	Hours: "ldv_Hours",
	Minutes: "ldv_Minutes",
	Month: "ldv_Month",
	MonthlyDayOccurrence: "ldv_MonthlyDayOccurrence",
	Months: "ldv_Months",
	Name: "ldv_name",
	RecurrenceRuleExceptionId: "ldv_recurrenceruleexceptionId",
	StartDate: "ldv_StartDate",
	WeekDay: "ldv_WeekDay",
	WeekDays: "ldv_WeekDays",
	Years: "ldv_Years",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.RecurrenceRuleException.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	DayOccurrences:
	{
		_1033: "Day Occurrences"
	}

,	DaysOfTheMonth:
	{
		_1033: "Days Of The Month"
	}

,	EndDate:
	{
		_1033: "End Date"
	}

,	Hours:
	{
		_1033: "Hours"
	}

,	Minutes:
	{
		_1033: "Minutes"
	}

,	Month:
	{
		_1033: "Month"
	}

,	MonthlyDayOccurrence:
	{
		_1033: "Monthly Day Occurrence"
	}

,	Months:
	{
		_1033: "Months"
	}

,	Name:
	{
		_1033: "Name"
	}

,	RecurrenceRuleExceptionId:
	{
		_1033: "Recurrence Rule Exception"
	}

,	StartDate:
	{
		_1033: "Start Date"
	}

,	WeekDay:
	{
		_1033: "Week Day"
	}

,	WeekDays:
	{
		_1033: "Week Days"
	}

,	Years:
	{
		_1033: "Years"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.RecurrenceRuleException.Relations =
{
	OneToN:
	{
		ldv_recurrenceruleexception_AsyncOperations: "ldv_recurrenceruleexception_AsyncOperations",
		ldv_recurrenceruleexception_BulkDeleteFailures: "ldv_recurrenceruleexception_BulkDeleteFailures",
		ldv_recurrenceruleexception_MailboxTrackingFolders: "ldv_recurrenceruleexception_MailboxTrackingFolders",
		ldv_recurrenceruleexception_PrincipalObjectAttributeAccesses: "ldv_recurrenceruleexception_PrincipalObjectAttributeAccesses",
		ldv_recurrenceruleexception_ProcessSession: "ldv_recurrenceruleexception_ProcessSession",
		ldv_recurrenceruleexception_SyncErrors: "ldv_recurrenceruleexception_SyncErrors",
		ldv_recurrenceruleexception_UserEntityInstanceDatas: "ldv_recurrenceruleexception_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_recurrenceruleexception: "business_unit_ldv_recurrenceruleexception",
		lk_ldv_recurrenceruleexception_createdby: "lk_ldv_recurrenceruleexception_createdby",
		lk_ldv_recurrenceruleexception_createdonbehalfby: "lk_ldv_recurrenceruleexception_createdonbehalfby",
		lk_ldv_recurrenceruleexception_modifiedby: "lk_ldv_recurrenceruleexception_modifiedby",
		lk_ldv_recurrenceruleexception_modifiedonbehalfby: "lk_ldv_recurrenceruleexception_modifiedonbehalfby",
		owner_ldv_recurrenceruleexception: "owner_ldv_recurrenceruleexception",
		team_ldv_recurrenceruleexception: "team_ldv_recurrenceruleexception",
		user_ldv_recurrenceruleexception: "user_ldv_recurrenceruleexception"
,
		Lookups:
		{
			business_unit_ldv_recurrenceruleexception: "owningbusinessunit",
			lk_ldv_recurrenceruleexception_createdby: "createdby",
			lk_ldv_recurrenceruleexception_createdonbehalfby: "createdonbehalfby",
			lk_ldv_recurrenceruleexception_modifiedby: "modifiedby",
			lk_ldv_recurrenceruleexception_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_recurrenceruleexception: "ownerid",
			team_ldv_recurrenceruleexception: "owningteam",
			user_ldv_recurrenceruleexception: "owninguser"
		}
	},

	NToN:
	{
		RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce: "ldv_ldv_recurrencerule_ldv_recurrenceruleexce",
		ldv_ldv_recurrenceruleexceptiongrouping_ldv_r: "ldv_ldv_recurrenceruleexceptiongrouping_ldv_r"
	}
}

Sdk.RoutingCondition =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 CustomRoutingWF: "ldv_customroutingwfid",
	 EntityLogicalName_ldv_EntityLogicalName: "ldv_entitylogicalname",
	 AssignToLeastLoaded: "ldv_isassigntoleastloaded",
	 PickRegarding: "ldv_ispickregarding",
	 LeastLoadedFetchXML: "ldv_leastloadedfetchxml",
	 Name: "ldv_name",
	 Priority: "ldv_priority",
	 FieldValue: "ldv_recordfieldvalue",
	 RoutingTarget: "ldv_recordroutingoptions",
	 Role: "ldv_role",
	 RoutingCondition_ldv_RoutingCondition: "ldv_routingcondition",
	 RoutingConditionId: "ldv_routingconditionid",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.RoutingCondition.DisplayName = "Routing Condition";
Sdk.RoutingCondition.SchemaName = "ldv_routingcondition";
Sdk.RoutingCondition.EntityLogicalName = "ldv_routingcondition";

Sdk.RoutingCondition.AssignToLeastLoadedEnum =
{
	Yes: 1,
	No: 0
}

Sdk.RoutingCondition.PickRegardingEnum =
{
	Yes: 1,
	No: 0
}

Sdk.RoutingCondition.RoutingTargetEnum =
{
	CurrentOwner: 2,
	CurrentOwnerManager: 3,
	CurrentOwnerManagerManager: 4,
	Role: 1,
	Custom: 5,
	FieldValue: 7,
	DefaultRoutingUser: 6
}

Sdk.RoutingCondition.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.RoutingCondition.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.RoutingCondition.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	CustomRoutingWF: "ldv_CustomRoutingWFId",
	EntityLogicalName_ldv_EntityLogicalName: "ldv_EntityLogicalName",
	AssignToLeastLoaded: "ldv_IsAssignToLeastLoaded",
	PickRegarding: "ldv_IsPickRegarding",
	LeastLoadedFetchXML: "ldv_LeastLoadedFetchXML",
	Name: "ldv_name",
	Priority: "ldv_Priority",
	FieldValue: "ldv_RecordFieldValue",
	RoutingTarget: "ldv_RecordRoutingOptions",
	Role: "ldv_Role",
	RoutingCondition_ldv_RoutingCondition: "ldv_RoutingCondition",
	RoutingConditionId: "ldv_routingconditionId",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.RoutingCondition.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	CustomRoutingWF:
	{
		_1033: "Custom Routing WF"
	}

,	EntityLogicalName_ldv_EntityLogicalName:
	{
		_1033: "Entity Logical Name"
	}

,	AssignToLeastLoaded:
	{
		_1033: "Assign To Least Loaded"
	}

,	PickRegarding:
	{
		_1033: "Pick Regarding"
	}

,	LeastLoadedFetchXML:
	{
		_1033: "Least Loaded FetchXML"
	}

,	Name:
	{
		_1033: "Name"
	}

,	Priority:
	{
		_1033: "Priority"
	}

,	FieldValue:
	{
		_1033: "Field Value"
	}

,	RoutingTarget:
	{
		_1033: "Routing Target"
	}

,	Role:
	{
		_1033: "Role"
	}

,	RoutingCondition_ldv_RoutingCondition:
	{
		_1033: "Routing Condition"
	}

,	RoutingConditionId:
	{
		_1033: "Routing Condition"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.RoutingCondition.Relations =
{
	OneToN:
	{
		ldv_ldv_routingcondition_ldv_routingcondition: "ldv_ldv_routingcondition_ldv_routingcondition",
		ldv_routingcondition_AsyncOperations: "ldv_routingcondition_AsyncOperations",
		ldv_routingcondition_BulkDeleteFailures: "ldv_routingcondition_BulkDeleteFailures",
		ldv_routingcondition_MailboxTrackingFolders: "ldv_routingcondition_MailboxTrackingFolders",
		ldv_routingcondition_PrincipalObjectAttributeAccesses: "ldv_routingcondition_PrincipalObjectAttributeAccesses",
		ldv_routingcondition_ProcessSession: "ldv_routingcondition_ProcessSession",
		ldv_routingcondition_SyncErrors: "ldv_routingcondition_SyncErrors",
		ldv_routingcondition_UserEntityInstanceDatas: "ldv_routingcondition_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_routingcondition: "business_unit_ldv_routingcondition",
		ldv_ldv_roleconfiguration_ldv_routingcondition_Role: "ldv_ldv_roleconfiguration_ldv_routingcondition_Role",
		ldv_workflow_ldv_routingcondition_CustomRoutingWFId: "ldv_workflow_ldv_routingcondition_CustomRoutingWFId",
		lk_ldv_routingcondition_createdby: "lk_ldv_routingcondition_createdby",
		lk_ldv_routingcondition_createdonbehalfby: "lk_ldv_routingcondition_createdonbehalfby",
		lk_ldv_routingcondition_modifiedby: "lk_ldv_routingcondition_modifiedby",
		lk_ldv_routingcondition_modifiedonbehalfby: "lk_ldv_routingcondition_modifiedonbehalfby",
		owner_ldv_routingcondition: "owner_ldv_routingcondition",
		team_ldv_routingcondition: "team_ldv_routingcondition",
		user_ldv_routingcondition: "user_ldv_routingcondition"
,
		Lookups:
		{
			business_unit_ldv_routingcondition: "owningbusinessunit",
			ldv_ldv_roleconfiguration_ldv_routingcondition_Role: "ldv_role",
			ldv_workflow_ldv_routingcondition_CustomRoutingWFId: "ldv_customroutingwfid",
			lk_ldv_routingcondition_createdby: "createdby",
			lk_ldv_routingcondition_createdonbehalfby: "createdonbehalfby",
			lk_ldv_routingcondition_modifiedby: "modifiedby",
			lk_ldv_routingcondition_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_routingcondition: "ownerid",
			team_ldv_routingcondition: "owningteam",
			user_ldv_routingcondition: "owninguser"
		}
	},

	NToN:
	{
		TaskConfigurationsOfldv_taskconfiguration_routingcondition: "ldv_taskconfiguration_routingcondition"
	}
}

Sdk.SLAConfiguration =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 Calendar: "ldv_calendar",
	 FailureThreshold: "ldv_failurethreshold",
	 RegisterChangeDetectStep: "ldv_isregisterchangedetectstep",
	 Name: "ldv_name",
	 PauseCondition: "ldv_pausecondition",
	 ResumeCondition: "ldv_resumecondition",
	 SLAConfigurationId: "ldv_slaconfigurationid",
	 StartCondition: "ldv_startcondition",
	 SuccessCondition: "ldv_successcondition",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.SLAConfiguration.DisplayName = "SLA Configuration";
Sdk.SLAConfiguration.SchemaName = "ldv_slaconfiguration";
Sdk.SLAConfiguration.EntityLogicalName = "ldv_slaconfiguration";

Sdk.SLAConfiguration.RegisterChangeDetectStepEnum =
{
	Yes: 1,
	No: 0
}

Sdk.SLAConfiguration.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.SLAConfiguration.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.SLAConfiguration.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	Calendar: "ldv_Calendar",
	FailureThreshold: "ldv_FailureThreshold",
	RegisterChangeDetectStep: "ldv_IsRegisterChangeDetectStep",
	Name: "ldv_name",
	PauseCondition: "ldv_PauseCondition",
	ResumeCondition: "ldv_ResumeCondition",
	SLAConfigurationId: "ldv_slaconfigurationId",
	StartCondition: "ldv_StartCondition",
	SuccessCondition: "ldv_SuccessCondition",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.SLAConfiguration.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	Calendar:
	{
		_1033: "Calendar"
	}

,	FailureThreshold:
	{
		_1033: "Failure Threshold"
	}

,	RegisterChangeDetectStep:
	{
		_1033: "Register Change Detect Step"
	}

,	Name:
	{
		_1033: "Name"
	}

,	PauseCondition:
	{
		_1033: "Pause Condition"
	}

,	ResumeCondition:
	{
		_1033: "Resume Condition"
	}

,	SLAConfigurationId:
	{
		_1033: "SLA Configuration"
	}

,	StartCondition:
	{
		_1033: "Start Condition"
	}

,	SuccessCondition:
	{
		_1033: "Success Condition"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.SLAConfiguration.Relations =
{
	OneToN:
	{
		ldv_ldv_slaconfiguration_task_SLAConfiguration: "ldv_ldv_slaconfiguration_task_SLAConfiguration",
		ldv_slaconfiguration_AsyncOperations: "ldv_slaconfiguration_AsyncOperations",
		ldv_slaconfiguration_BulkDeleteFailures: "ldv_slaconfiguration_BulkDeleteFailures",
		ldv_slaconfiguration_MailboxTrackingFolders: "ldv_slaconfiguration_MailboxTrackingFolders",
		ldv_slaconfiguration_PrincipalObjectAttributeAccesses: "ldv_slaconfiguration_PrincipalObjectAttributeAccesses",
		ldv_slaconfiguration_ProcessSession: "ldv_slaconfiguration_ProcessSession",
		ldv_slaconfiguration_slainstance_SLAConfigurationId: "ldv_slaconfiguration_slainstance_SLAConfigurationId",
		ldv_slaconfiguration_SyncErrors: "ldv_slaconfiguration_SyncErrors",
		TaskConfigurationsOfSLAConfiguration: "ldv_slaconfiguration_taskconfiguration_SLAConfigurationId",
		ldv_slaconfiguration_UserEntityInstanceDatas: "ldv_slaconfiguration_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_slaconfiguration: "business_unit_ldv_slaconfiguration",
		lk_ldv_slaconfiguration_createdby: "lk_ldv_slaconfiguration_createdby",
		lk_ldv_slaconfiguration_createdonbehalfby: "lk_ldv_slaconfiguration_createdonbehalfby",
		lk_ldv_slaconfiguration_modifiedby: "lk_ldv_slaconfiguration_modifiedby",
		lk_ldv_slaconfiguration_modifiedonbehalfby: "lk_ldv_slaconfiguration_modifiedonbehalfby",
		owner_ldv_slaconfiguration: "owner_ldv_slaconfiguration",
		team_ldv_slaconfiguration: "team_ldv_slaconfiguration",
		user_ldv_slaconfiguration: "user_ldv_slaconfiguration"
,
		Lookups:
		{
			business_unit_ldv_slaconfiguration: "owningbusinessunit",
			lk_ldv_slaconfiguration_createdby: "createdby",
			lk_ldv_slaconfiguration_createdonbehalfby: "createdonbehalfby",
			lk_ldv_slaconfiguration_modifiedby: "modifiedby",
			lk_ldv_slaconfiguration_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_slaconfiguration: "ownerid",
			team_ldv_slaconfiguration: "owningteam",
			user_ldv_slaconfiguration: "owninguser"
		}
	},

	NToN:
	{
		ldv_slaconfiguration_slaaction: "ldv_slaconfiguration_slaaction"
	}
}

Sdk.TaskConfiguration =
{
	 CreatedBy: "createdby",
	 CreatedOn: "createdon",
	 CreatedByDelegate: "createdonbehalfby",
	 ImportSequenceNumber: "importsequencenumber",
	 CloseCondition: "ldv_closeconditions",
	 CreateCondition: "ldv_createconditions",
	 EntityLogicalName_ldv_EntityLogicalName: "ldv_entitylogicalname",
	 AssignRegardingonPick: "ldv_isassignregardingonpick",
	 AutoClose: "ldv_isautoclose",
	 Name: "ldv_name",
	 OnCloseWorkflow: "ldv_oncloseworkflowid",
	 OnCreateWorkflow: "ldv_oncreateworkflowid",
	 SLAConfiguration: "ldv_slaconfigurationid",
	 Subject: "ldv_subject",
	 SubjectinArabic: "ldv_subjectinarabic",
	 TaskConfigurationId: "ldv_taskconfigurationid",
	 ModifiedBy: "modifiedby",
	 ModifiedOn: "modifiedon",
	 ModifiedByDelegate: "modifiedonbehalfby",
	 RecordCreatedOn: "overriddencreatedon",
	 Owner: "ownerid",
	 OwningBusinessUnit: "owningbusinessunit",
	 OwningTeam: "owningteam",
	 OwningUser: "owninguser",
	 Status: "statecode",
	 StatusReason: "statuscode",
	 TimeZoneRuleVersionNumber: "timezoneruleversionnumber",
	 UTCConversionTimeZoneCode: "utcconversiontimezonecode",
	 VersionNumber: "versionnumber"
};

Sdk.TaskConfiguration.DisplayName = "Task Configuration";
Sdk.TaskConfiguration.SchemaName = "ldv_taskconfiguration";
Sdk.TaskConfiguration.EntityLogicalName = "ldv_taskconfiguration";

Sdk.TaskConfiguration.AssignRegardingonPickEnum =
{
	Yes: 1,
	No: 0
}

Sdk.TaskConfiguration.AutoCloseEnum =
{
	Yes: 1,
	No: 0
}

Sdk.TaskConfiguration.StatusEnum =
{
	Active: 0,
	Inactive: 1
}

Sdk.TaskConfiguration.StatusReasonEnum =
{
	Active: 1,
	Inactive: 2
}


Sdk.TaskConfiguration.Schema =
{
	CreatedBy: "CreatedBy",
	CreatedOn: "CreatedOn",
	CreatedByDelegate: "CreatedOnBehalfBy",
	ImportSequenceNumber: "ImportSequenceNumber",
	CloseCondition: "ldv_CloseConditions",
	CreateCondition: "ldv_CreateConditions",
	EntityLogicalName_ldv_EntityLogicalName: "ldv_EntityLogicalName",
	AssignRegardingonPick: "ldv_IsAssignRegardingOnPick",
	AutoClose: "ldv_IsAutoClose",
	Name: "ldv_name",
	OnCloseWorkflow: "ldv_OnCloseWorkflowId",
	OnCreateWorkflow: "ldv_OnCreateWorkflowId",
	SLAConfiguration: "ldv_SLAConfigurationId",
	Subject: "ldv_Subject",
	SubjectinArabic: "ldv_SubjectInArabic",
	TaskConfigurationId: "ldv_taskconfigurationId",
	ModifiedBy: "ModifiedBy",
	ModifiedOn: "ModifiedOn",
	ModifiedByDelegate: "ModifiedOnBehalfBy",
	RecordCreatedOn: "OverriddenCreatedOn",
	Owner: "OwnerId",
	OwningBusinessUnit: "OwningBusinessUnit",
	OwningTeam: "OwningTeam",
	OwningUser: "OwningUser",
	Status: "statecode",
	StatusReason: "statuscode",
	TimeZoneRuleVersionNumber: "TimeZoneRuleVersionNumber",
	UTCConversionTimeZoneCode: "UTCConversionTimeZoneCode",
	VersionNumber: "VersionNumber"
}

Sdk.TaskConfiguration.Labels =
{
	CreatedBy:
	{
		_1033: "Created By"
	}

,	CreatedOn:
	{
		_1033: "Created On"
	}

,	CreatedByDelegate:
	{
		_1033: "Created By (Delegate)"
	}

,	ImportSequenceNumber:
	{
		_1033: "Import Sequence Number"
	}

,	CloseCondition:
	{
		_1033: "Close Condition"
	}

,	CreateCondition:
	{
		_1033: "Create Condition"
	}

,	EntityLogicalName_ldv_EntityLogicalName:
	{
		_1033: "Entity Logical Name"
	}

,	AssignRegardingonPick:
	{
		_1033: "Assign Regarding on Pick"
	}

,	AutoClose:
	{
		_1033: "Auto Close"
	}

,	Name:
	{
		_1033: "Name"
	}

,	OnCloseWorkflow:
	{
		_1033: "On-Close Workflow"
	}

,	OnCreateWorkflow:
	{
		_1033: "On-Create Workflow"
	}

,	SLAConfiguration:
	{
		_1033: "SLA Configuration"
	}

,	Subject:
	{
		_1033: "Subject"
	}

,	SubjectinArabic:
	{
		_1033: "Subject in Arabic"
	}

,	TaskConfigurationId:
	{
		_1033: "Task Configuration"
	}

,	ModifiedBy:
	{
		_1033: "Modified By"
	}

,	ModifiedOn:
	{
		_1033: "Modified On"
	}

,	ModifiedByDelegate:
	{
		_1033: "Modified By (Delegate)"
	}

,	RecordCreatedOn:
	{
		_1033: "Record Created On"
	}

,	Owner:
	{
		_1033: "Owner"
	}

,	OwningBusinessUnit:
	{
		_1033: "Owning Business Unit"
	}

,	OwningTeam:
	{
		_1033: "Owning Team"
	}

,	OwningUser:
	{
		_1033: "Owning User"
	}

,	Status:
	{
		_1033: "Status"
	}

,	StatusReason:
	{
		_1033: "Status Reason"
	}

,	TimeZoneRuleVersionNumber:
	{
		_1033: "Time Zone Rule Version Number"
	}

,	UTCConversionTimeZoneCode:
	{
		_1033: "UTC Conversion Time Zone Code"
	}

,	VersionNumber:
	{
		_1033: "Version Number"
	}

}

Sdk.TaskConfiguration.Relations =
{
	OneToN:
	{
		ldv_taskconfiguration_AsyncOperations: "ldv_taskconfiguration_AsyncOperations",
		ldv_taskconfiguration_BulkDeleteFailures: "ldv_taskconfiguration_BulkDeleteFailures",
		ldv_taskconfiguration_MailboxTrackingFolders: "ldv_taskconfiguration_MailboxTrackingFolders",
		ldv_taskconfiguration_PrincipalObjectAttributeAccesses: "ldv_taskconfiguration_PrincipalObjectAttributeAccesses",
		ldv_taskconfiguration_ProcessSession: "ldv_taskconfiguration_ProcessSession",
		ldv_taskconfiguration_routingconditionentry: "ldv_taskconfiguration_routingconditionentry",
		ldv_taskconfiguration_SyncErrors: "ldv_taskconfiguration_SyncErrors",
		ldv_taskconfiguration_task_TaskConfigurationId: "ldv_taskconfiguration_task_TaskConfigurationId",
		ldv_taskconfiguration_taskconfigurationstep_TaskConfigurationId: "ldv_taskconfiguration_taskconfigurationstep_TaskConfigurationId",
		ldv_taskconfiguration_UserEntityInstanceDatas: "ldv_taskconfiguration_UserEntityInstanceDatas"
	},
			
	NToOne:
	{
		business_unit_ldv_taskconfiguration: "business_unit_ldv_taskconfiguration",
		SLAConfigurationAsSLAConfiguration: "ldv_slaconfiguration_taskconfiguration_SLAConfigurationId",
		ldv_workflow_ldv_taskconfiguration_OnCloseWorkflowId: "ldv_workflow_ldv_taskconfiguration_OnCloseWorkflowId",
		ldv_workflow_ldv_taskconfiguration_OnCreateWorkflowId: "ldv_workflow_ldv_taskconfiguration_OnCreateWorkflowId",
		lk_ldv_taskconfiguration_createdby: "lk_ldv_taskconfiguration_createdby",
		lk_ldv_taskconfiguration_createdonbehalfby: "lk_ldv_taskconfiguration_createdonbehalfby",
		lk_ldv_taskconfiguration_modifiedby: "lk_ldv_taskconfiguration_modifiedby",
		lk_ldv_taskconfiguration_modifiedonbehalfby: "lk_ldv_taskconfiguration_modifiedonbehalfby",
		owner_ldv_taskconfiguration: "owner_ldv_taskconfiguration",
		team_ldv_taskconfiguration: "team_ldv_taskconfiguration",
		user_ldv_taskconfiguration: "user_ldv_taskconfiguration"
,
		Lookups:
		{
			business_unit_ldv_taskconfiguration: "owningbusinessunit",
			SLAConfigurationAsSLAConfiguration: "ldv_slaconfigurationid",
			ldv_workflow_ldv_taskconfiguration_OnCloseWorkflowId: "ldv_oncloseworkflowid",
			ldv_workflow_ldv_taskconfiguration_OnCreateWorkflowId: "ldv_oncreateworkflowid",
			lk_ldv_taskconfiguration_createdby: "createdby",
			lk_ldv_taskconfiguration_createdonbehalfby: "createdonbehalfby",
			lk_ldv_taskconfiguration_modifiedby: "modifiedby",
			lk_ldv_taskconfiguration_modifiedonbehalfby: "modifiedonbehalfby",
			owner_ldv_taskconfiguration: "ownerid",
			team_ldv_taskconfiguration: "owningteam",
			user_ldv_taskconfiguration: "owninguser"
		}
	},

	NToN:
	{
		NotificationsOfldv_taskconfiguration_notifications_Close: "ldv_taskconfiguration_notifications_Close",
		NotificationsOfldv_taskconfiguration_notifications_Create: "ldv_taskconfiguration_notifications_Create",
		RoutingConditionsOfldv_taskconfiguration_routingcondition: "ldv_taskconfiguration_routingcondition"
	}
}


